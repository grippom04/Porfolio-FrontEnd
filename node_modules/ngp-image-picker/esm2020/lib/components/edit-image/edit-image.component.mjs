import { Component, Input, Output, EventEmitter } from '@angular/core';
import { convertImageUsingCanvas, saveState } from '../../functions/image-processing';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/forms";
import * as i3 from "../tabs/tabs.component";
import * as i4 from "../basic-filters/basic-filters.component";
import * as i5 from "../cropper-wrapper/cropper-wrapper.component";
// const Croppr = require('../../services/croppr-service')
export class EditImageComponent {
    constructor(chRef) {
        this.chRef = chRef;
        this.imageSrc = '';
        this.color = '';
        this.controlPanelIndex = 0;
        this.showCrop = false;
        this.observer = null;
        this.allFormats = ['webp', 'jpeg', 'png'];
        this.initialState = {};
        this.state = {
            quality: 92,
            maxHeight: 1000,
            maxWidth: 1000,
            cropHeight: 150,
            cropWidth: 150,
            maintainAspectRatio: true,
            format: 'jpeg',
            arrayCopiedImages: [],
            originImageSrc: '',
        };
        this.croppSize = { width: 150, height: 150 };
        this.isMobile = false;
        this.closeModal = new EventEmitter();
    }
    ngOnInit() {
        this.state = JSON.parse(JSON.stringify({ ...this.state, ...this.initialState }));
        this.isMobile = window.innerWidth < 800;
    }
    onCloseEditPanel(saveChanges = false) {
        if (this.observer instanceof ResizeObserver) {
            let imageCroperElRef = document.getElementById('image-croper');
            let imageFullElRef = document.getElementById('image-full');
            this.observer.unobserve(imageCroperElRef);
            this.observer.unobserve(imageFullElRef);
        }
        this.showCrop = false;
        if (saveChanges)
            this.closeModal.next({ state: this.state, imageSrc: this.imageSrc });
        else
            this.closeModal.next(null);
    }
    onControlPanelIndexChange(idex) {
        this.controlPanelIndex = idex;
    }
    calculateSize() {
        if (this.imageSrc && this.imageSrc.length) {
            return Math.ceil(((3 / 4) * this.imageSrc.length) / 1024);
        }
        else {
            return "";
        }
    }
    async onChangeSize(changeHeight = false) {
        try {
            this.imageSrc = await convertImageUsingCanvas(this.state.originImageSrc, changeHeight, this.state);
            this.chRef.markForCheck();
        }
        catch (error) {
            console.error('ðŸš€ ~ file: edit-image.component.ts ~ line 76 ~ EditImageComponent ~ onChangeSize ~ error', error);
            this.chRef.markForCheck();
        }
    }
    async onChangeQuality() {
        try {
            this.imageSrc = await convertImageUsingCanvas(this.state.originImageSrc, false, this.state);
            this.chRef.markForCheck();
        }
        catch (error) {
            console.error('ðŸš€ ~ file: edit-image.component.ts ~ line 86 ~ EditImageComponent ~ onChangeQuality ~ error', error);
            this.chRef.markForCheck();
        }
    }
    async onChangeFormat() {
        try {
            this.imageSrc = await convertImageUsingCanvas(this.state.originImageSrc, false, this.state);
            this.chRef.markForCheck();
        }
        catch (error) {
            console.error('ðŸš€ ~ file: edit-image.component.ts ~ line 98 ~ EditImageComponent ~ onChangeFormat ~ error', error);
            this.chRef.markForCheck();
        }
    }
    async onRestore() {
        try {
            if (this.state.arrayCopiedImages.length > 1) {
                this.state.arrayCopiedImages.pop();
                let newValue = this.state.arrayCopiedImages[this.state.arrayCopiedImages.length - 1];
                this.state = {
                    ...this.state,
                    maxHeight: newValue.height,
                    maxWidth: newValue.width,
                    quality: newValue.quality,
                    format: newValue.format,
                    originImageSrc: newValue.originImageSrc,
                    basicFilters: newValue.basicFilters,
                };
                this.imageSrc = newValue.lastImage;
                this.chRef.markForCheck();
            }
        }
        catch (e) {
            console.error('ðŸš€ ~ file: edit-image.component.ts ~ line 126 ~ EditImageComponent ~ onRestore ~ e', e);
        }
    }
    onCroppUpdate(data) {
        this.croppState = data;
        this.state.cropHeight = data.height;
        this.state.cropWidth = data.width;
    }
    onChangeCrop() {
        this.croppSize = { width: this.state.cropWidth, height: this.state.cropHeight };
    }
    onCrop() {
        // const dataHolderRect = document.querySelector('.croppr-container').getBoundingClientRect();
        const canvas = document.createElement('canvas');
        return new Promise((resolve, reject) => {
            let ctx = canvas.getContext('2d');
            let image = new Image();
            image.src = this.imageSrc;
            image.onload = () => {
                // let ratio = image.height / dataHolderRect.height;
                let newWidth = this.croppState?.width;
                let newHeight = this.croppState?.height;
                canvas.height = newHeight;
                canvas.width = newWidth;
                ctx.drawImage(image, Math.abs(this.croppState?.x || 0), Math.abs(this.croppState?.y || 0), this.croppState?.width || 0, this.croppState?.height || 0, 0, 0, this.croppState?.width || 0, this.croppState?.height || 0);
                return resolve(canvas.toDataURL(`image/${this.state.format}`, this.state.quality));
            };
            image.onerror = (e) => {
                reject(e);
            };
        })
            .then((dataUri) => {
            this.imageSrc = dataUri;
            this.showCrop = false;
            this.state.maxWidth = canvas.width;
            this.state.maxHeight = canvas.height;
            this.state.originImageSrc = dataUri;
            this.state.cropHeight = 150;
            this.state.cropWidth = 150;
            saveState(this.state, dataUri);
            this.croppSize = { width: 150, height: 150 };
            this.chRef.markForCheck();
        })
            .catch((e) => {
            console.error(e);
        });
    }
    async onChangeFilters(data) {
        try {
            if (!this.state.basicFilters) {
                this.state.basicFilters = data;
            }
            else {
                this.state.basicFilters = { ...this.state.basicFilters, ...data };
            }
            this.imageSrc = await convertImageUsingCanvas(this.state.originImageSrc, false, this.state);
            this.chRef.markForCheck();
        }
        catch (e) {
            console.error('ðŸš€ ~ file: edit-image.component.ts ~ line 250 ~ EditImageComponent ~ onChangeFilters ~ e', e);
        }
    }
}
EditImageComponent.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: EditImageComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ÉµÉµFactoryTarget.Component });
EditImageComponent.Éµcmp = i0.ÉµÉµngDeclareComponent({ minVersion: "14.0.0", version: "15.0.4", type: EditImageComponent, selector: "lib-edit-image", inputs: { labels: "labels", imageSrc: "imageSrc", color: "color", initialState: "initialState" }, outputs: { closeModal: "closeModal" }, ngImport: i0, template: "<div id=\"popup\" class=\"popup\">\n  <div\n    style=\"\n      flex-direction: row;\n      box-sizing: border-box;\n      display: flex;\n      place-content: center flex-end;\n      align-items: center;\n      padding: 0px 16px;\n    \"\n  >\n    <button class=\"icon-btn\" (click)=\"onCloseEditPanel(false)\">\n      <span class=\"material-icons\">clear</span>\n    </button>\n  </div>\n\n  <div class=\"image-container\">\n    <div class=\"image-holder-full\">\n      <img id=\"image-full\" [src]=\"this.imageSrc\" [style.display]=\"showCrop ? 'none' : ''\" />\n\n      <lib-cropper-wrapper\n        [setSize]=\"this.croppSize\"\n        (croppUpdate)=\"onCroppUpdate($event)\"\n        [_imageSrc]=\"this.imageSrc\"\n        *ngIf=\"showCrop\"\n      ></lib-cropper-wrapper>\n    </div>\n\n    <div class=\"control-panel\">\n      <lib-tabs [color]=\"this.color\" [_labels]=\"['Basic', 'Filters']\" (indexActivatedChange)=\"onControlPanelIndexChange($event)\">\n        <ng-container *ngIf=\"controlPanelIndex == 0\">\n          <ng-container *ngIf=\"!isMobile || (isMobile && !showCrop)\">\n            <div style=\"display: flex; width: 100%; justify-content: space-between\">\n              <p class=\"item-panel\">{{ labels['Quality'] }}</p>\n              <p class=\"item-panel\">{{ this.state.quality + '%' }}</p>\n            </div>\n\n            <div style=\"flex-direction: row; box-sizing: border-box; display: flex; place-content: flex-start; align-items: flex-start\">\n              <input\n                [readonly]=\"showCrop\"\n                [disabled]=\"showCrop\"\n                class=\"input-range\"\n                (change)=\"onChangeQuality()\"\n                [ngStyle]=\"{ maxWidth: '100%', width: '100%', color: color }\"\n                [(ngModel)]=\"this.state.quality\"\n                type=\"range\"\n                min=\"1\"\n                max=\"100\"\n                value=\"50\"\n              />\n            </div>\n\n            <div class=\"item-panel\" style=\"display: flex; width: 100%; justify-content: space-between\">\n              {{ labels['Max dimensions'] }}\n              <div style=\"display: flex; align-items: center\">\n                <input\n                  [readonly]=\"showCrop\"\n                  [disabled]=\"showCrop\"\n                  type=\"checkbox\"\n                  [(ngModel)]=\"this.state.maintainAspectRatio\"\n                  [style.color]=\"color\"\n                />\n                <span class=\"caption\">{{ labels['aspect-ratio'] }}</span>\n              </div>\n            </div>\n\n            <div\n              style=\"\n                margin-top: 8px !important;\n                flex-flow: row wrap;\n                box-sizing: border-box;\n                display: flex;\n                place-content: flex-start space-between;\n                align-items: flex-start;\n              \"\n            >\n              <div class=\"form-field\" style=\"max-width: 48%; width: 48%\">\n                <label>{{ labels['max-width(px)'] }}</label>\n                <input\n                  [readonly]=\"showCrop\"\n                  [disabled]=\"showCrop\"\n                  (change)=\"onChangeSize(false)\"\n                  placeholder=\"{{ labels['max-width(px)'] }}\"\n                  [(ngModel)]=\"this.state.maxWidth\"\n                  type=\"number\"\n                  [min]=\"0\"\n                  [max]=\"2000\"\n                />\n              </div>\n\n              <div class=\"form-field\" style=\"max-width: 48%; width: 48%\">\n                <label>{{ labels['max-height(px)'] }}</label>\n                <input\n                  [readonly]=\"showCrop\"\n                  [disabled]=\"showCrop\"\n                  (change)=\"onChangeSize(true)\"\n                  placeholder=\"{{ labels['max-height(px)'] }}\"\n                  [(ngModel)]=\"this.state.maxHeight\"\n                  type=\"number\"\n                  [min]=\"0\"\n                  [max]=\"2000\"\n                />\n              </div>\n            </div>\n\n            <p class=\"item-panel\">{{ labels['Format'] }}</p>\n            <div\n              style=\"\n                margin-top: 8px !important;\n                flex-direction: row;\n                box-sizing: border-box;\n                display: flex;\n                place-content: flex-start;\n                align-items: flex-start;\n              \"\n            >\n              <div class=\"form-field\" style=\"width: 100%\">\n                <select [disabled]=\"showCrop\" [(ngModel)]=\"this.state.format\" (change)=\"onChangeFormat()\">\n                  <option *ngFor=\"let formatItem of allFormats\" [value]=\"formatItem\">{{ formatItem }}</option>\n                </select>\n              </div>\n            </div>\n          </ng-container>\n          <!-- <p class=\"item-panel\">{{ labels['Rotate'] }}</p>\n\n          <div\n            style=\"\n              margin-top: 8px !important;\n              flex-direction: row;\n              box-sizing: border-box;\n              display: flex;\n              place-content: flex-start;\n              align-items: flex-start;\n            \"\n          >\n            <button [disabled]=\"showCrop\" class=\"icon-btn\" style=\"padding-left: 0px\" (click)=\"onRotate(90)\">\n              <span class=\"material-icons\"> rotate_left </span>\n            </button>\n            <button [disabled]=\"showCrop\" class=\"icon-btn\" (click)=\"onRestore()\" (click)=\"onRotate(-90)\">\n              <span class=\"material-icons\"> rotate_right </span>\n            </button>\n          </div>\n\n          <hr />\n          <br /> -->\n\n          <div style=\"display: flex; justify-content: space-between; margin-bottom: 8px\">\n            <span style=\"display: flex; align-items: center\">\n              <input type=\"checkbox\" [(ngModel)]=\"showCrop\" [style.color]=\"color\" style=\"margin-bottom: 3px\" />\n              <span class=\"item-panel\" style=\"margin-left: 4px\">{{ labels['Crop'] }}</span>\n            </span>\n          </div>\n\n          <ng-container *ngIf=\"showCrop\">\n            <div\n              style=\"\n                margin-top: 8px !important;\n                flex-flow: row wrap;\n                box-sizing: border-box;\n                display: flex;\n                place-content: flex-start space-between;\n                align-items: flex-start;\n              \"\n            >\n              <div class=\"form-field\" style=\"max-width: 48%; width: 48%; margin-bottom: 8px\">\n                <label>{{ labels['width(px)'] }}</label>\n                <input\n                  (change)=\"onChangeCrop()\"\n                  placeholder=\"{{ labels['width(px)'] }}\"\n                  [(ngModel)]=\"state.cropWidth\"\n                  type=\"number\"\n                  [min]=\"0\"\n                  [max]=\"2000\"\n                />\n              </div>\n              <div class=\"form-field\" style=\"max-width: 48%; width: 48%; margin-bottom: 8px\">\n                <label>{{ labels['height(px)'] }}</label>\n                <input\n                  (change)=\"onChangeCrop()\"\n                  placeholder=\"{{ labels['height(px)'] }}\"\n                  [(ngModel)]=\"state.cropHeight\"\n                  type=\"number\"\n                  [min]=\"0\"\n                  [max]=\"2000\"\n                />\n              </div>\n            </div>\n\n            <p style=\"margin-bottom: 4px !important\">\n              <button title=\"Cut the image\" class=\"icon-btn\" (click)=\"onCrop()\">\n                <span class=\"material-icons\"> crop </span>\n              </button>\n            </p>\n          </ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"controlPanelIndex == 1\">\n          <lib-basic-filters\n            [filterState]=\"this.state.basicFilters\"\n            (changeFilter)=\"onChangeFilters($event)\"\n            [labels]=\"this.labels\"\n            [color]=\"this.color\"\n          ></lib-basic-filters>\n        </ng-container>\n      </lib-tabs>\n\n      <button\n        title=\"{{ labels['Undo'] }}\"\n        [disabled]=\"this.state.arrayCopiedImages.length <= 1\"\n        style=\"position: absolute; right: 10px; top: 30px\"\n        class=\"icon-btn\"\n        (click)=\"onRestore()\"\n      >\n        <span class=\"material-icons\"> refresh </span>\n      </button>\n      <div\n        style=\"\n          flex-direction: row;\n          box-sizing: border-box;\n          display: flex;\n          place-content: center space-between;\n          align-items: center;\n          margin-top: 8px;\n        \"\n      >\n        <button class=\"save-btn\" (click)=\"onCloseEditPanel(true)\">{{ labels['Save'] }}</button>\n\n        <p\n          *ngIf=\"this.calculateSize()\"\n          class=\"caption image-caption\"\n          [ngStyle]=\"{\n            color: this.calculateSize() > 120 ? '#f44336' : 'unset',\n            fontWeight: this.calculateSize() > 120 ? '500' : 'unset'\n          }\"\n        >\n          size: {{ this.calculateSize() }}Kb &nbsp; {{ this.state.format }}\n        </p>\n      </div>\n    </div>\n  </div>\n</div>\n", styles: [".popup{width:100vw;max-height:100%;height:100%;overflow:auto;position:fixed;top:0;left:0;background-color:#000c;z-index:1000;padding:24px 16px;color:#fff;box-sizing:border-box;animation-name:show;animation-duration:.4s}.popup .image-container{margin-top:50px;margin-bottom:50px;width:100%;flex-flow:row wrap;box-sizing:border-box;display:flex;place-content:flex-start center;align-items:flex-start}.popup .image-container .image-holder-full{height:auto;width:auto;position:relative;display:contents}.popup .material-icons{color:#fff}.popup img{vertical-align:middle;max-height:650px;max-width:100%;object-fit:cover;object-position:center}@media (max-width: 1024px){.popup{background-color:#000000d9;padding:8px}.popup img{max-height:100%;max-width:100%}}@media (max-width: 599px){.popup img{margin:0}}.popup .control-panel{color:#fff;background-color:#000000eb;margin:0 16px;padding:16px;width:18rem;border-radius:8px;flex-direction:column;box-sizing:border-box;display:flex;place-content:stretch flex-start;align-items:stretch;max-width:100%;position:relative}@media (max-width: 599px){.popup .control-panel{margin:8px 0;width:100%}}.popup .control-panel .title-panel{padding:0 4px;font-size:17px;font-weight:500;margin-bottom:16px!important}.popup .control-panel .item-panel{padding:0;font-size:14px;font-weight:500}.image-croper{position:absolute;width:180px;height:180px;min-height:64px;min-width:64px;border:2.5px solid #fafafa;box-sizing:border-box;resize:both;overflow:auto;opacity:0;border-radius:4px;overflow:hidden;z-index:10}.image-croper #image-croper-header{padding:0;cursor:move;z-index:9;background-color:transparent;color:#fff;height:100%;display:grid;gap:0px;grid-template-columns:repeat(3,1fr);width:100%;box-sizing:border-box;position:absolute;top:50%;transform:translateY(-50%);opacity:.8}.image-croper #image-croper-header .material-icons{color:#fff}.input-range{margin-bottom:16px;margin-top:4px}input[type=checkbox]{cursor:pointer}.form-field{margin-bottom:16px}.form-field label{font-size:12px;opacity:.92;margin-bottom:4px;display:block}.form-field input{height:34px;width:100%;box-sizing:border-box;border-radius:4px;border:none;padding:2px 8px;outline:none}.form-field select{height:34px;width:100%;box-sizing:border-box;border-radius:4px;border:none;padding:2px 8px;outline:none;background-color:#fff}.save-btn{padding:0 8px;height:34px;box-sizing:border-box;background-color:#fff;color:#000;border:none;border-radius:4px;cursor:pointer}.save-btn:active{transform:scale(.95)}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "directive", type: i2.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2.ÉµNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { kind: "directive", type: i2.RangeValueAccessor, selector: "input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]" }, { kind: "directive", type: i2.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i2.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.MinValidator, selector: "input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]", inputs: ["min"] }, { kind: "directive", type: i2.MaxValidator, selector: "input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]", inputs: ["max"] }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i3.TabsComponent, selector: "lib-tabs", inputs: ["color", "_labels", "_indexActivated"], outputs: ["indexActivatedChange"] }, { kind: "component", type: i4.BasicFiltersComponent, selector: "lib-basic-filters", inputs: ["color", "labels", "filterState"], outputs: ["changeFilter"] }, { kind: "component", type: i5.CropperWrapperComponent, selector: "lib-cropper-wrapper", inputs: ["_imageSrc", "setSize"], outputs: ["croppUpdate"] }] });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: EditImageComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-edit-image', template: "<div id=\"popup\" class=\"popup\">\n  <div\n    style=\"\n      flex-direction: row;\n      box-sizing: border-box;\n      display: flex;\n      place-content: center flex-end;\n      align-items: center;\n      padding: 0px 16px;\n    \"\n  >\n    <button class=\"icon-btn\" (click)=\"onCloseEditPanel(false)\">\n      <span class=\"material-icons\">clear</span>\n    </button>\n  </div>\n\n  <div class=\"image-container\">\n    <div class=\"image-holder-full\">\n      <img id=\"image-full\" [src]=\"this.imageSrc\" [style.display]=\"showCrop ? 'none' : ''\" />\n\n      <lib-cropper-wrapper\n        [setSize]=\"this.croppSize\"\n        (croppUpdate)=\"onCroppUpdate($event)\"\n        [_imageSrc]=\"this.imageSrc\"\n        *ngIf=\"showCrop\"\n      ></lib-cropper-wrapper>\n    </div>\n\n    <div class=\"control-panel\">\n      <lib-tabs [color]=\"this.color\" [_labels]=\"['Basic', 'Filters']\" (indexActivatedChange)=\"onControlPanelIndexChange($event)\">\n        <ng-container *ngIf=\"controlPanelIndex == 0\">\n          <ng-container *ngIf=\"!isMobile || (isMobile && !showCrop)\">\n            <div style=\"display: flex; width: 100%; justify-content: space-between\">\n              <p class=\"item-panel\">{{ labels['Quality'] }}</p>\n              <p class=\"item-panel\">{{ this.state.quality + '%' }}</p>\n            </div>\n\n            <div style=\"flex-direction: row; box-sizing: border-box; display: flex; place-content: flex-start; align-items: flex-start\">\n              <input\n                [readonly]=\"showCrop\"\n                [disabled]=\"showCrop\"\n                class=\"input-range\"\n                (change)=\"onChangeQuality()\"\n                [ngStyle]=\"{ maxWidth: '100%', width: '100%', color: color }\"\n                [(ngModel)]=\"this.state.quality\"\n                type=\"range\"\n                min=\"1\"\n                max=\"100\"\n                value=\"50\"\n              />\n            </div>\n\n            <div class=\"item-panel\" style=\"display: flex; width: 100%; justify-content: space-between\">\n              {{ labels['Max dimensions'] }}\n              <div style=\"display: flex; align-items: center\">\n                <input\n                  [readonly]=\"showCrop\"\n                  [disabled]=\"showCrop\"\n                  type=\"checkbox\"\n                  [(ngModel)]=\"this.state.maintainAspectRatio\"\n                  [style.color]=\"color\"\n                />\n                <span class=\"caption\">{{ labels['aspect-ratio'] }}</span>\n              </div>\n            </div>\n\n            <div\n              style=\"\n                margin-top: 8px !important;\n                flex-flow: row wrap;\n                box-sizing: border-box;\n                display: flex;\n                place-content: flex-start space-between;\n                align-items: flex-start;\n              \"\n            >\n              <div class=\"form-field\" style=\"max-width: 48%; width: 48%\">\n                <label>{{ labels['max-width(px)'] }}</label>\n                <input\n                  [readonly]=\"showCrop\"\n                  [disabled]=\"showCrop\"\n                  (change)=\"onChangeSize(false)\"\n                  placeholder=\"{{ labels['max-width(px)'] }}\"\n                  [(ngModel)]=\"this.state.maxWidth\"\n                  type=\"number\"\n                  [min]=\"0\"\n                  [max]=\"2000\"\n                />\n              </div>\n\n              <div class=\"form-field\" style=\"max-width: 48%; width: 48%\">\n                <label>{{ labels['max-height(px)'] }}</label>\n                <input\n                  [readonly]=\"showCrop\"\n                  [disabled]=\"showCrop\"\n                  (change)=\"onChangeSize(true)\"\n                  placeholder=\"{{ labels['max-height(px)'] }}\"\n                  [(ngModel)]=\"this.state.maxHeight\"\n                  type=\"number\"\n                  [min]=\"0\"\n                  [max]=\"2000\"\n                />\n              </div>\n            </div>\n\n            <p class=\"item-panel\">{{ labels['Format'] }}</p>\n            <div\n              style=\"\n                margin-top: 8px !important;\n                flex-direction: row;\n                box-sizing: border-box;\n                display: flex;\n                place-content: flex-start;\n                align-items: flex-start;\n              \"\n            >\n              <div class=\"form-field\" style=\"width: 100%\">\n                <select [disabled]=\"showCrop\" [(ngModel)]=\"this.state.format\" (change)=\"onChangeFormat()\">\n                  <option *ngFor=\"let formatItem of allFormats\" [value]=\"formatItem\">{{ formatItem }}</option>\n                </select>\n              </div>\n            </div>\n          </ng-container>\n          <!-- <p class=\"item-panel\">{{ labels['Rotate'] }}</p>\n\n          <div\n            style=\"\n              margin-top: 8px !important;\n              flex-direction: row;\n              box-sizing: border-box;\n              display: flex;\n              place-content: flex-start;\n              align-items: flex-start;\n            \"\n          >\n            <button [disabled]=\"showCrop\" class=\"icon-btn\" style=\"padding-left: 0px\" (click)=\"onRotate(90)\">\n              <span class=\"material-icons\"> rotate_left </span>\n            </button>\n            <button [disabled]=\"showCrop\" class=\"icon-btn\" (click)=\"onRestore()\" (click)=\"onRotate(-90)\">\n              <span class=\"material-icons\"> rotate_right </span>\n            </button>\n          </div>\n\n          <hr />\n          <br /> -->\n\n          <div style=\"display: flex; justify-content: space-between; margin-bottom: 8px\">\n            <span style=\"display: flex; align-items: center\">\n              <input type=\"checkbox\" [(ngModel)]=\"showCrop\" [style.color]=\"color\" style=\"margin-bottom: 3px\" />\n              <span class=\"item-panel\" style=\"margin-left: 4px\">{{ labels['Crop'] }}</span>\n            </span>\n          </div>\n\n          <ng-container *ngIf=\"showCrop\">\n            <div\n              style=\"\n                margin-top: 8px !important;\n                flex-flow: row wrap;\n                box-sizing: border-box;\n                display: flex;\n                place-content: flex-start space-between;\n                align-items: flex-start;\n              \"\n            >\n              <div class=\"form-field\" style=\"max-width: 48%; width: 48%; margin-bottom: 8px\">\n                <label>{{ labels['width(px)'] }}</label>\n                <input\n                  (change)=\"onChangeCrop()\"\n                  placeholder=\"{{ labels['width(px)'] }}\"\n                  [(ngModel)]=\"state.cropWidth\"\n                  type=\"number\"\n                  [min]=\"0\"\n                  [max]=\"2000\"\n                />\n              </div>\n              <div class=\"form-field\" style=\"max-width: 48%; width: 48%; margin-bottom: 8px\">\n                <label>{{ labels['height(px)'] }}</label>\n                <input\n                  (change)=\"onChangeCrop()\"\n                  placeholder=\"{{ labels['height(px)'] }}\"\n                  [(ngModel)]=\"state.cropHeight\"\n                  type=\"number\"\n                  [min]=\"0\"\n                  [max]=\"2000\"\n                />\n              </div>\n            </div>\n\n            <p style=\"margin-bottom: 4px !important\">\n              <button title=\"Cut the image\" class=\"icon-btn\" (click)=\"onCrop()\">\n                <span class=\"material-icons\"> crop </span>\n              </button>\n            </p>\n          </ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"controlPanelIndex == 1\">\n          <lib-basic-filters\n            [filterState]=\"this.state.basicFilters\"\n            (changeFilter)=\"onChangeFilters($event)\"\n            [labels]=\"this.labels\"\n            [color]=\"this.color\"\n          ></lib-basic-filters>\n        </ng-container>\n      </lib-tabs>\n\n      <button\n        title=\"{{ labels['Undo'] }}\"\n        [disabled]=\"this.state.arrayCopiedImages.length <= 1\"\n        style=\"position: absolute; right: 10px; top: 30px\"\n        class=\"icon-btn\"\n        (click)=\"onRestore()\"\n      >\n        <span class=\"material-icons\"> refresh </span>\n      </button>\n      <div\n        style=\"\n          flex-direction: row;\n          box-sizing: border-box;\n          display: flex;\n          place-content: center space-between;\n          align-items: center;\n          margin-top: 8px;\n        \"\n      >\n        <button class=\"save-btn\" (click)=\"onCloseEditPanel(true)\">{{ labels['Save'] }}</button>\n\n        <p\n          *ngIf=\"this.calculateSize()\"\n          class=\"caption image-caption\"\n          [ngStyle]=\"{\n            color: this.calculateSize() > 120 ? '#f44336' : 'unset',\n            fontWeight: this.calculateSize() > 120 ? '500' : 'unset'\n          }\"\n        >\n          size: {{ this.calculateSize() }}Kb &nbsp; {{ this.state.format }}\n        </p>\n      </div>\n    </div>\n  </div>\n</div>\n", styles: [".popup{width:100vw;max-height:100%;height:100%;overflow:auto;position:fixed;top:0;left:0;background-color:#000c;z-index:1000;padding:24px 16px;color:#fff;box-sizing:border-box;animation-name:show;animation-duration:.4s}.popup .image-container{margin-top:50px;margin-bottom:50px;width:100%;flex-flow:row wrap;box-sizing:border-box;display:flex;place-content:flex-start center;align-items:flex-start}.popup .image-container .image-holder-full{height:auto;width:auto;position:relative;display:contents}.popup .material-icons{color:#fff}.popup img{vertical-align:middle;max-height:650px;max-width:100%;object-fit:cover;object-position:center}@media (max-width: 1024px){.popup{background-color:#000000d9;padding:8px}.popup img{max-height:100%;max-width:100%}}@media (max-width: 599px){.popup img{margin:0}}.popup .control-panel{color:#fff;background-color:#000000eb;margin:0 16px;padding:16px;width:18rem;border-radius:8px;flex-direction:column;box-sizing:border-box;display:flex;place-content:stretch flex-start;align-items:stretch;max-width:100%;position:relative}@media (max-width: 599px){.popup .control-panel{margin:8px 0;width:100%}}.popup .control-panel .title-panel{padding:0 4px;font-size:17px;font-weight:500;margin-bottom:16px!important}.popup .control-panel .item-panel{padding:0;font-size:14px;font-weight:500}.image-croper{position:absolute;width:180px;height:180px;min-height:64px;min-width:64px;border:2.5px solid #fafafa;box-sizing:border-box;resize:both;overflow:auto;opacity:0;border-radius:4px;overflow:hidden;z-index:10}.image-croper #image-croper-header{padding:0;cursor:move;z-index:9;background-color:transparent;color:#fff;height:100%;display:grid;gap:0px;grid-template-columns:repeat(3,1fr);width:100%;box-sizing:border-box;position:absolute;top:50%;transform:translateY(-50%);opacity:.8}.image-croper #image-croper-header .material-icons{color:#fff}.input-range{margin-bottom:16px;margin-top:4px}input[type=checkbox]{cursor:pointer}.form-field{margin-bottom:16px}.form-field label{font-size:12px;opacity:.92;margin-bottom:4px;display:block}.form-field input{height:34px;width:100%;box-sizing:border-box;border-radius:4px;border:none;padding:2px 8px;outline:none}.form-field select{height:34px;width:100%;box-sizing:border-box;border-radius:4px;border:none;padding:2px 8px;outline:none;background-color:#fff}.save-btn{padding:0 8px;height:34px;box-sizing:border-box;background-color:#fff;color:#000;border:none;border-radius:4px;cursor:pointer}.save-btn:active{transform:scale(.95)}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { labels: [{
                type: Input
            }], imageSrc: [{
                type: Input
            }], color: [{
                type: Input
            }], initialState: [{
                type: Input
            }], closeModal: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,