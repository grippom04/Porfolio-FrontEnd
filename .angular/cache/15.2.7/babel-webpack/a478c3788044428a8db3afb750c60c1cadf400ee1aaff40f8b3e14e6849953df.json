{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/migue/Desktop/Argentina Programa/PortfolioFrontEnd/PortfolioFrontEnd/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, Input, Output, HostListener, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i2 from '@angular/forms';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nfunction TabsComponent_div_1_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\");\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵstyleProp(\"background-color\", ctx_r3.color);\n  }\n}\nconst _c0 = function (a0, a1, a2) {\n  return {\n    color: a0,\n    opacity: a1,\n    fontWeight: a2\n  };\n};\nfunction TabsComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵlistener(\"click\", function TabsComponent_div_1_Template_div_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const index_r2 = restoredCtx.index;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onActivateTab(index_r2));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵtemplate(2, TabsComponent_div_1_div_2_Template, 1, 2, \"div\", 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const tab_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction3(3, _c0, tab_r1.active ? ctx_r0.color : \"inherit\", tab_r1.active ? 1 : 0.7, tab_r1.active ? 500 : \"inherit\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", tab_r1.label, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", tab_r1.active);\n  }\n}\nconst _c1 = [\"*\"];\nconst _c2 = function (a2) {\n  return {\n    maxWidth: \"100%\",\n    width: \"100%\",\n    color: a2\n  };\n};\nfunction EditImageComponent_lib_cropper_wrapper_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"lib-cropper-wrapper\", 15);\n    i0.ɵɵlistener(\"croppUpdate\", function EditImageComponent_lib_cropper_wrapper_8_Template_lib_cropper_wrapper_croppUpdate_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onCroppUpdate($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"setSize\", ctx_r0.croppSize)(\"_imageSrc\", ctx_r0.imageSrc);\n  }\n}\nfunction EditImageComponent_ng_container_11_ng_container_1_option_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 34);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const formatItem_r9 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", formatItem_r9);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(formatItem_r9);\n  }\n}\nfunction EditImageComponent_ng_container_11_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 20)(2, \"p\", 21);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"p\", 21);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 22)(7, \"input\", 23);\n    i0.ɵɵlistener(\"change\", function EditImageComponent_ng_container_11_ng_container_1_Template_input_change_7_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r10.onChangeQuality());\n    })(\"ngModelChange\", function EditImageComponent_ng_container_11_ng_container_1_Template_input_ngModelChange_7_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r12.state.quality = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"div\", 24);\n    i0.ɵɵtext(9);\n    i0.ɵɵelementStart(10, \"div\", 17)(11, \"input\", 25);\n    i0.ɵɵlistener(\"ngModelChange\", function EditImageComponent_ng_container_11_ng_container_1_Template_input_ngModelChange_11_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.state.maintainAspectRatio = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"span\", 26);\n    i0.ɵɵtext(13);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(14, \"div\", 27)(15, \"div\", 28)(16, \"label\");\n    i0.ɵɵtext(17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"input\", 29);\n    i0.ɵɵlistener(\"change\", function EditImageComponent_ng_container_11_ng_container_1_Template_input_change_18_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.onChangeSize(false));\n    })(\"ngModelChange\", function EditImageComponent_ng_container_11_ng_container_1_Template_input_ngModelChange_18_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r15.state.maxWidth = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(19, \"div\", 28)(20, \"label\");\n    i0.ɵɵtext(21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(22, \"input\", 29);\n    i0.ɵɵlistener(\"change\", function EditImageComponent_ng_container_11_ng_container_1_Template_input_change_22_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r16.onChangeSize(true));\n    })(\"ngModelChange\", function EditImageComponent_ng_container_11_ng_container_1_Template_input_ngModelChange_22_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r17 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r17.state.maxHeight = $event);\n    });\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(23, \"p\", 21);\n    i0.ɵɵtext(24);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(25, \"div\", 30)(26, \"div\", 31)(27, \"select\", 32);\n    i0.ɵɵlistener(\"ngModelChange\", function EditImageComponent_ng_container_11_ng_container_1_Template_select_ngModelChange_27_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r18 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r18.state.format = $event);\n    })(\"change\", function EditImageComponent_ng_container_11_ng_container_1_Template_select_change_27_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r19.onChangeFormat());\n    });\n    i0.ɵɵtemplate(28, EditImageComponent_ng_container_11_ng_container_1_option_28_Template, 2, 2, \"option\", 33);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r6.labels[\"Quality\"]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r6.state.quality + \"%\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"readonly\", ctx_r6.showCrop)(\"disabled\", ctx_r6.showCrop)(\"ngStyle\", i0.ɵɵpureFunction1(31, _c2, ctx_r6.color))(\"ngModel\", ctx_r6.state.quality);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r6.labels[\"Max dimensions\"], \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleProp(\"color\", ctx_r6.color);\n    i0.ɵɵproperty(\"readonly\", ctx_r6.showCrop)(\"disabled\", ctx_r6.showCrop)(\"ngModel\", ctx_r6.state.maintainAspectRatio);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r6.labels[\"aspect-ratio\"]);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r6.labels[\"max-width(px)\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", ctx_r6.labels[\"max-width(px)\"]);\n    i0.ɵɵproperty(\"readonly\", ctx_r6.showCrop)(\"disabled\", ctx_r6.showCrop)(\"ngModel\", ctx_r6.state.maxWidth)(\"min\", 0)(\"max\", 2000);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r6.labels[\"max-height(px)\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", ctx_r6.labels[\"max-height(px)\"]);\n    i0.ɵɵproperty(\"readonly\", ctx_r6.showCrop)(\"disabled\", ctx_r6.showCrop)(\"ngModel\", ctx_r6.state.maxHeight)(\"min\", 0)(\"max\", 2000);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r6.labels[\"Format\"]);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"disabled\", ctx_r6.showCrop)(\"ngModel\", ctx_r6.state.format);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r6.allFormats);\n  }\n}\nfunction EditImageComponent_ng_container_11_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 27)(2, \"div\", 35)(3, \"label\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"input\", 36);\n    i0.ɵɵlistener(\"change\", function EditImageComponent_ng_container_11_ng_container_7_Template_input_change_5_listener() {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r20 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r20.onChangeCrop());\n    })(\"ngModelChange\", function EditImageComponent_ng_container_11_ng_container_7_Template_input_ngModelChange_5_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r22 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r22.state.cropWidth = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 35)(7, \"label\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"input\", 36);\n    i0.ɵɵlistener(\"change\", function EditImageComponent_ng_container_11_ng_container_7_Template_input_change_9_listener() {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r23 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r23.onChangeCrop());\n    })(\"ngModelChange\", function EditImageComponent_ng_container_11_ng_container_7_Template_input_ngModelChange_9_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r24 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r24.state.cropHeight = $event);\n    });\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(10, \"p\", 37)(11, \"button\", 38);\n    i0.ɵɵlistener(\"click\", function EditImageComponent_ng_container_11_ng_container_7_Template_button_click_11_listener() {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r25 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r25.onCrop());\n    });\n    i0.ɵɵelementStart(12, \"span\", 3);\n    i0.ɵɵtext(13, \" crop \");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r7.labels[\"width(px)\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", ctx_r7.labels[\"width(px)\"]);\n    i0.ɵɵproperty(\"ngModel\", ctx_r7.state.cropWidth)(\"min\", 0)(\"max\", 2000);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r7.labels[\"height(px)\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", ctx_r7.labels[\"height(px)\"]);\n    i0.ɵɵproperty(\"ngModel\", ctx_r7.state.cropHeight)(\"min\", 0)(\"max\", 2000);\n  }\n}\nfunction EditImageComponent_ng_container_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r27 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, EditImageComponent_ng_container_11_ng_container_1_Template, 29, 33, \"ng-container\", 10);\n    i0.ɵɵelementStart(2, \"div\", 16)(3, \"span\", 17)(4, \"input\", 18);\n    i0.ɵɵlistener(\"ngModelChange\", function EditImageComponent_ng_container_11_Template_input_ngModelChange_4_listener($event) {\n      i0.ɵɵrestoreView(_r27);\n      const ctx_r26 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r26.showCrop = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"span\", 19);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵtemplate(7, EditImageComponent_ng_container_11_ng_container_7_Template, 14, 10, \"ng-container\", 10);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.isMobile || ctx_r1.isMobile && !ctx_r1.showCrop);\n    i0.ɵɵadvance(3);\n    i0.ɵɵstyleProp(\"color\", ctx_r1.color);\n    i0.ɵɵproperty(\"ngModel\", ctx_r1.showCrop);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.labels[\"Crop\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.showCrop);\n  }\n}\nfunction EditImageComponent_ng_container_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r29 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"lib-basic-filters\", 39);\n    i0.ɵɵlistener(\"changeFilter\", function EditImageComponent_ng_container_12_Template_lib_basic_filters_changeFilter_1_listener($event) {\n      i0.ɵɵrestoreView(_r29);\n      const ctx_r28 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r28.onChangeFilters($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"filterState\", ctx_r2.state.basicFilters)(\"labels\", ctx_r2.labels)(\"color\", ctx_r2.color);\n  }\n}\nconst _c3 = function (a0, a1) {\n  return {\n    color: a0,\n    fontWeight: a1\n  };\n};\nfunction EditImageComponent_p_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 40);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction2(3, _c3, ctx_r3.calculateSize() > 120 ? \"#f44336\" : \"unset\", ctx_r3.calculateSize() > 120 ? \"500\" : \"unset\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" size: \", ctx_r3.calculateSize(), \"Kb \\xA0 \", ctx_r3.state.format, \" \");\n  }\n}\nconst _c4 = function () {\n  return [\"Basic\", \"Filters\"];\n};\nconst _c5 = [\"imagePicker\"];\nconst _c6 = function (a0, a1, a2, a3) {\n  return {\n    width: a0,\n    height: a1,\n    borderRadius: a2,\n    aspectRatio: a3\n  };\n};\nfunction NgpImagePickerComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"div\", 3)(2, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function NgpImagePickerComponent_div_0_Template_button_click_2_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onUpload($event));\n    });\n    i0.ɵɵelementStart(3, \"span\", 5);\n    i0.ɵɵtext(4, \"add_a_photo\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"input\", 6, 7);\n    i0.ɵɵlistener(\"change\", function NgpImagePickerComponent_div_0_Template_input_change_5_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.handleFileSelect($event));\n    });\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction4(3, _c6, ctx_r0.config.width, ctx_r0.config.height, ctx_r0.config.borderRadius, ctx_r0.config.aspectRatio));\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r0.labels[\"Upload a image\"]);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"id\", \"filePicker-\" + ctx_r0.uuidFilePicker);\n  }\n}\nfunction NgpImagePickerComponent_div_1_p_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 16);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction2(3, _c3, ctx_r8.calculateSize() > 120 ? \"#f44336\" : \"unset\", ctx_r8.calculateSize() > 120 ? \"500\" : \"unset\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" size: \", ctx_r8.calculateSize(), \"Kb \\xA0 \", ctx_r8.state.format, \" \");\n  }\n}\nfunction NgpImagePickerComponent_div_1_button_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 17);\n    i0.ɵɵlistener(\"click\", function NgpImagePickerComponent_div_1_button_7_Template_button_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.onUpload($event));\n    });\n    i0.ɵɵelementStart(1, \"span\", 5);\n    i0.ɵɵtext(2, \"add_a_photo\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r9.labels[\"Upload a image\"]);\n  }\n}\nfunction NgpImagePickerComponent_div_1_button_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 18);\n    i0.ɵɵlistener(\"click\", function NgpImagePickerComponent_div_1_button_8_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r15.onOpenEditPanel());\n    });\n    i0.ɵɵelementStart(1, \"span\", 5);\n    i0.ɵɵtext(2, \"edit\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r10.labels[\"Open the editor panel\"]);\n  }\n}\nfunction NgpImagePickerComponent_div_1_a_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"a\", 19)(1, \"span\", 5);\n    i0.ɵɵtext(2, \"cloud_download\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext(2);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r11.labels[\"Download the image\"]);\n    i0.ɵɵpropertyInterpolate(\"download\", ctx_r11.imageName);\n    i0.ɵɵproperty(\"href\", ctx_r11.imageSrc, i0.ɵɵsanitizeUrl);\n  }\n}\nfunction NgpImagePickerComponent_div_1_button_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 20);\n    i0.ɵɵlistener(\"click\", function NgpImagePickerComponent_div_1_button_10_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r17 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r17.onRemove());\n    });\n    i0.ɵɵelementStart(1, \"span\", 5);\n    i0.ɵɵtext(2, \"delete\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r12.labels[\"Remove\"]);\n  }\n}\nconst _c7 = function (a0, a1) {\n  return {\n    borderRadius: a0,\n    objectFit: a1\n  };\n};\nfunction NgpImagePickerComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"div\", 8);\n    i0.ɵɵelement(2, \"img\", 9);\n    i0.ɵɵelementStart(3, \"input\", 6, 7);\n    i0.ɵɵlistener(\"change\", function NgpImagePickerComponent_div_1_Template_input_change_3_listener($event) {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r19.handleFileSelect($event));\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(5, NgpImagePickerComponent_div_1_p_5_Template, 2, 6, \"p\", 10);\n    i0.ɵɵelementStart(6, \"div\", 11);\n    i0.ɵɵtemplate(7, NgpImagePickerComponent_div_1_button_7_Template, 3, 1, \"button\", 12);\n    i0.ɵɵtemplate(8, NgpImagePickerComponent_div_1_button_8_Template, 3, 1, \"button\", 13);\n    i0.ɵɵtemplate(9, NgpImagePickerComponent_div_1_a_9_Template, 3, 3, \"a\", 14);\n    i0.ɵɵtemplate(10, NgpImagePickerComponent_div_1_button_10_Template, 3, 1, \"button\", 15);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction4(9, _c6, ctx_r1.config.width, ctx_r1.config.height, ctx_r1.config.borderRadius, ctx_r1.config.aspectRatio));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", ctx_r1.imageSrc, i0.ɵɵsanitizeUrl)(\"ngStyle\", i0.ɵɵpureFunction2(14, _c7, ctx_r1.config.borderRadius, ctx_r1.config.objectFit));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", \"filePicker-\" + ctx_r1.uuidFilePicker);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.calculateSize());\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.config.hideAddBtn);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.config.hideEditBtn);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.config.hideDownloadBtn);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.config.hideDeleteBtn);\n  }\n}\nfunction NgpImagePickerComponent_lib_edit_image_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"lib-edit-image\", 21);\n    i0.ɵɵlistener(\"closeModal\", function NgpImagePickerComponent_lib_edit_image_2_Template_lib_edit_image_closeModal_0_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r21.onCloseEditPanel($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"imageSrc\", ctx_r2.imageSrc)(\"initialState\", ctx_r2.state)(\"labels\", ctx_r2.labels)(\"color\", ctx_r2.color);\n  }\n}\nconst MAX_BUFFER_UNDO_MEMORY = 25;\nlet rotate = 1;\nconst convertImageUsingCanvas = (datas, changeHeight = false, state, options) => {\n  return new Promise( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (resolve, _) {\n      let img = document.createElement('img');\n      img.src = datas + '';\n      img.crossOrigin = 'Anonymous';\n      let quality = state.quality / 100;\n      let maintainRatio = state.maintainAspectRatio;\n      img.onload = () => {\n        var canvas = document.createElement('canvas');\n        let ctx = canvas.getContext('2d');\n        if (!ctx) return;\n        let ratio = img.width / img.height;\n        let width = state.maxWidth;\n        let height = state.maxHeight;\n        if (options?.getDimFromImage) {\n          width = img.width;\n          height = img.height;\n        }\n        if (maintainRatio) {\n          canvas.width = width;\n          canvas.height = width / ratio;\n          if (changeHeight) {\n            canvas.width = height * ratio;\n            canvas.height = height;\n          }\n        } else {\n          canvas.width = width;\n          canvas.height = height;\n        }\n        if (state.basicFilters) {\n          ctx.filter = processFilter(state.basicFilters);\n        }\n        // if (options?.rotate) {\n        //   canvas.width = height;\n        //   canvas.height = width;\n        //   if (options?.rotate === 90) {\n        //     ctx.rotate((90 * Math.PI) / 180);\n        //     ctx.translate(0, -canvas.width);\n        //   } else {\n        //     ctx.rotate((-90 * Math.PI) / 180);\n        //     ctx.translate(-canvas.height, 0);\n        //   }\n        //   ctx.drawImage(img, 0, 0);\n        // } else {\n        // }\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n        let type = state.format;\n        var dataURI = canvas.toDataURL(`image/${type}`, quality);\n        resolve({\n          dataUri: dataURI,\n          width: canvas.width,\n          height: canvas.height\n        });\n      };\n    });\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }()).then(data => {\n    state.maxHeight = data.height;\n    state.maxWidth = data.width;\n    saveState(state, data.dataUri);\n    return data.dataUri;\n  });\n  function processFilter(data) {\n    return Object.keys(data).map(key => {\n      if (['blur'].includes(key)) {\n        return `${key}(${data[key]}px)`;\n      } else {\n        return `${key}(${data[key]})`;\n      }\n    }).join('');\n  }\n};\nconst dragElement = elemnt => {\n  if (!elemnt) return;\n  let pos1 = 0,\n    pos2 = 0,\n    pos3 = 0,\n    pos4 = 0;\n  if (document.getElementById(elemnt.id + '-header')) {\n    /* if present, the header is where you move the DIV from:*/\n    let elementRef = document.getElementById(elemnt?.id + '-header');\n    if (!elementRef) return;\n    elementRef.onmousedown = dragPressOn;\n    elementRef.ontouchstart = dragPressOn;\n  } else {\n    /* otherwise, move the DIV from anywhere inside the DIV:*/\n    elemnt.ontouchstart = dragPressOn;\n    elemnt.onmousedown = dragPressOn;\n  }\n  function dragPressOn(e) {\n    let popup = document.querySelector('#popup');\n    popup.style.overflowY = 'hidden';\n    e = e || window.event;\n    pos3 = e.clientX;\n    pos4 = e.clientY;\n    document.ontouchend = closeDragElement;\n    document.onmouseup = closeDragElement;\n    document.ontouchmove = elementDragTouch;\n    document.onmousemove = elementDragMouse;\n  }\n  function elementDragMouse(e) {\n    let holderImage = document.getElementById('image-full');\n    e = e || window.event;\n    pos1 = pos3 - e.clientX;\n    pos3 = e.clientX;\n    pos2 = pos4 - e.clientY;\n    pos4 = e.clientY;\n    let newTop = elemnt.offsetTop - pos2;\n    let newLeft = elemnt.offsetLeft - pos1;\n    let rectHolder = holderImage?.getBoundingClientRect();\n    let rectElemnt = elemnt.getBoundingClientRect();\n    // console.log('====================================');\n    // console.log(rectElemnt,rectHolder);\n    // console.log('====================================');\n    newTop = Math.max(newTop, rectHolder?.top);\n    newTop = Math.min(newTop, rectHolder?.bottom - rectElemnt.height);\n    newLeft = Math.max(newLeft, rectHolder?.left);\n    newLeft = Math.min(newLeft, rectHolder?.right - rectElemnt.width);\n    elemnt.style.top = newTop + 'px';\n    elemnt.style.left = newLeft + 'px';\n  }\n  function elementDragTouch(e) {\n    let holderImage = document.getElementById('image-full');\n    e = e || window.event;\n    if (e?.changedTouches?.length) {\n      pos1 = pos3 - e.changedTouches[0]?.clientX;\n      pos3 = e.changedTouches[0]?.clientX;\n    }\n    if (e?.changedTouches?.length) {\n      pos2 = pos4 - e.changedTouches[0]?.clientY;\n      pos4 = e.changedTouches[0]?.clientY;\n    }\n    let newTop = elemnt.offsetTop - pos2;\n    let newLeft = elemnt.offsetLeft - pos1;\n    let rectHolder = holderImage?.getBoundingClientRect();\n    let rectElemnt = elemnt.getBoundingClientRect();\n    // console.log('====================================');\n    // console.log(rectElemnt,rectHolder);\n    // console.log('====================================');\n    newTop = Math.max(newTop, rectHolder?.top);\n    newTop = Math.min(newTop, rectHolder?.bottom - rectElemnt.height);\n    newLeft = Math.max(newLeft, rectHolder?.left);\n    newLeft = Math.min(newLeft, rectHolder?.right - rectElemnt.width);\n    elemnt.style.top = newTop + 'px';\n    elemnt.style.left = newLeft + 'px';\n  }\n  function closeDragElement() {\n    /* stop moving when mouse button is released:*/\n    let popup = document.querySelector('#popup');\n    popup.style.overflowY = 'auto';\n    document.onmouseup = null;\n    document.onmousemove = null;\n    document.ontouchend = null;\n    document.ontouchmove = null;\n  }\n};\nconst saveState = (state, lastImage) => {\n  if (state.arrayCopiedImages.length <= MAX_BUFFER_UNDO_MEMORY) {\n    state.arrayCopiedImages.push({\n      lastImage: lastImage,\n      width: state.maxWidth,\n      height: state.maxHeight,\n      quality: state.quality,\n      format: state.format,\n      originImageSrc: state.originImageSrc,\n      basicFilters: state.basicFilters\n    });\n  } else {\n    state.arrayCopiedImages[state.arrayCopiedImages.length - 1] = {\n      lastImage: lastImage,\n      width: state.maxWidth,\n      height: state.maxHeight,\n      quality: state.quality,\n      format: state.format,\n      originImageSrc: state.originImageSrc,\n      basicFilters: state.basicFilters\n    };\n  }\n};\nvar Remove$3 = \"Quitar\";\nvar Quality$3 = \"Calidad\";\nvar Format$3 = \"Formato\";\nvar Crop$3 = \"Recortar\";\nvar Save$3 = \"Guardar\";\nvar Contrast$3 = \"Contraste\";\nvar Blur$3 = \"Blur\";\nvar Brightness$3 = \"Brillo\";\nvar Grayscale$3 = \"Scala de gris\";\nvar Saturate$2 = \"Saturación\";\nvar Sepia$3 = \"Sepia\";\nvar Rotate$1 = \"Rotar\";\nvar Undo$3 = \"Deshacer\";\nvar labelEs = {\n  \"Upload a image\": \"Suba una imagen\",\n  \"You must edit the image in order to resize it\": \"Debe editar la imagen para disminuir su tamaño\",\n  \"too large\": \"muy grande\",\n  \"Open the editor panel\": \"Abra el panel de edición\",\n  \"Download the image\": \"Descarge la imagen\",\n  \"Control Panel\": \"Panel de control\",\n  Remove: Remove$3,\n  Quality: Quality$3,\n  \"Max dimensions\": \"Dimensiones\",\n  \"aspect-ratio\": \"relación-aspecto\",\n  \"max-width(px)\": \"max. ancho\",\n  \"max-height(px)\": \"max. alto\",\n  Format: Format$3,\n  Crop: Crop$3,\n  \"width(px)\": \"ancho(px)\",\n  \"height(px)\": \"altura(px)\",\n  Save: Save$3,\n  Contrast: Contrast$3,\n  Blur: Blur$3,\n  Brightness: Brightness$3,\n  Grayscale: Grayscale$3,\n  Saturate: Saturate$2,\n  Sepia: Sepia$3,\n  Rotate: Rotate$1,\n  Undo: Undo$3\n};\nvar Quality$2 = \"Quality\";\nvar Format$2 = \"Format\";\nvar Crop$2 = \"Crop\";\nvar Remove$2 = \"Remove\";\nvar Save$2 = \"Save\";\nvar Contrast$2 = \"Contrast\";\nvar Blur$2 = \"Blur\";\nvar Brightness$2 = \"Brightness\";\nvar Grayscale$2 = \"Grayscale\";\nvar Saturate$1 = \"Saturate\";\nvar Sepia$2 = \"Sepia\";\nvar Rotate = \"Rotate\";\nvar Undo$2 = \"Undo\";\nvar labelEn = {\n  \"Upload a image\": \"Upload a image\",\n  \"You must edit the image in order to resize it\": \"You must edit the image in order to resize it\",\n  \"too large\": \"too large\",\n  \"Open the editor panel\": \"Open the editor panel\",\n  \"Download the image\": \"Download the image\",\n  \"Control Panel\": \"Control Panel\",\n  Quality: Quality$2,\n  \"Max dimensions\": \"Max dimensions\",\n  \"aspect-ratio\": \"aspect-ratio\",\n  \"max-width(px)\": \"max-width(px)\",\n  \"max-height(px)\": \"max-height(px)\",\n  Format: Format$2,\n  Crop: Crop$2,\n  \"width(px)\": \"width(px)\",\n  \"height(px)\": \"height(px)\",\n  Remove: Remove$2,\n  Save: Save$2,\n  Contrast: Contrast$2,\n  Blur: Blur$2,\n  Brightness: Brightness$2,\n  Grayscale: Grayscale$2,\n  Saturate: Saturate$1,\n  Sepia: Sepia$2,\n  Rotate: Rotate,\n  Undo: Undo$2\n};\nvar Remove$1 = \"Supprimer\";\nvar Quality$1 = \"Qualité\";\nvar Format$1 = \"Format\";\nvar Crop$1 = \"Recadrer\";\nvar Save$1 = \"Sauvez\";\nvar Contrast$1 = \"Contraste\";\nvar Blur$1 = \"Blur\";\nvar Brightness$1 = \"Luminosité\";\nvar Grayscale$1 = \"Grayscale\";\nvar Saturate = \"Saturer\";\nvar Sepia$1 = \"Seiche\";\nvar Undo$1 = \"Annuler\";\nvar labelFr = {\n  \"Upload a image\": \"Charger une image\",\n  \"You must edit the image in order to resize it\": \"Vous devez éditer l'image pour changer sa taille\",\n  \"too large\": \"Trop grande\",\n  \"Open the editor panel\": \"Ouvrir le panneau d'édition\",\n  \"Download the image\": \"Télécharger l'image\",\n  \"Control Panel\": \"Panneau de commande\",\n  Remove: Remove$1,\n  Quality: Quality$1,\n  \"Max dimensions\": \"Dimensions maximales\",\n  \"aspect-ratio\": \"rapport de forme\",\n  \"max-width(px)\": \"largeur max.\",\n  \"max-height(px)\": \"hauteur max\",\n  Format: Format$1,\n  Crop: Crop$1,\n  \"width(px)\": \"largeur(px)\",\n  \"height(px)\": \"hauteur(px)\",\n  Save: Save$1,\n  Contrast: Contrast$1,\n  Blur: Blur$1,\n  Brightness: Brightness$1,\n  Grayscale: Grayscale$1,\n  Saturate: Saturate,\n  Sepia: Sepia$1,\n  Undo: Undo$1\n};\nvar Quality = \"Qualität\";\nvar Format = \"Format\";\nvar Crop = \"Zuschneiden\";\nvar Remove = \"Entfernen\";\nvar Save = \"Speichern\";\nvar Contrast = \"Kontrast\";\nvar Blur = \"Blur\";\nvar Brightness = \"Helligkeit\";\nvar Grayscale = \"Graustufen\";\nvar Saturer = \"Sättigen\";\nvar Sepia = \"Tintenfisch\";\nvar Undo = \"Undo\";\nvar labelDe = {\n  \"Upload a image\": \"Bild hochladen\",\n  \"You must edit the image in order to resize it\": \"Sie müssen das Bild bearbeiten, um seine Größe zu ändern\",\n  \"too large\": \"zu groß\",\n  \"Open the editor panel\": \"Editor-Fenster öffnen\",\n  \"Download the image\": \"Bild herunterladen\",\n  \"Control Panel\": \"Bedienfeld\",\n  Quality: Quality,\n  \"Max dimensions\": \"Maximale Größe\",\n  \"aspect-ratio\": \"Seitenverhältnis\",\n  \"max-width(px)\": \"Max. Breite(px)\",\n  \"max-height(px)\": \"Max. Höhe(px)\",\n  Format: Format,\n  Crop: Crop,\n  \"width(px)\": \"Breite(px)\",\n  \"height(px)\": \"Höhe(px)\",\n  Remove: Remove,\n  Save: Save,\n  Contrast: Contrast,\n  Blur: Blur,\n  Brightness: Brightness,\n  Grayscale: Grayscale,\n  Saturer: Saturer,\n  Sepia: Sepia,\n  Undo: Undo\n};\nlet TabsComponent = /*#__PURE__*/(() => {\n  class TabsComponent {\n    constructor() {\n      this.labels = [];\n      this.indexActivated = 0;\n      this.color = '';\n      this.indexActivatedChange = new EventEmitter();\n    }\n    set _labels(value) {\n      if (value?.length) {\n        this.labels = value.map(el => ({\n          active: false,\n          label: el\n        }));\n        this.labels[this.indexActivated].active = true;\n      }\n    }\n    set _indexActivated(index) {\n      this.indexActivated = index || 0;\n    }\n    onActivateTab(itemIndex) {\n      this.labels = this.labels.map((el, index) => {\n        el.active = itemIndex === index ? true : false;\n        return el;\n      });\n      this.indexActivated = itemIndex;\n      this.indexActivatedChange.next(itemIndex);\n    }\n    ngOnInit() {}\n  }\n  TabsComponent.ɵfac = function TabsComponent_Factory(t) {\n    return new (t || TabsComponent)();\n  };\n  TabsComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TabsComponent,\n    selectors: [[\"lib-tabs\"]],\n    inputs: {\n      color: \"color\",\n      _labels: \"_labels\",\n      _indexActivated: \"_indexActivated\"\n    },\n    outputs: {\n      indexActivatedChange: \"indexActivatedChange\"\n    },\n    ngContentSelectors: _c1,\n    decls: 4,\n    vars: 1,\n    consts: [[1, \"header\"], [\"class\", \"itemlabel bottomLine\", 3, \"ngStyle\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"body\"], [1, \"itemlabel\", \"bottomLine\", 3, \"ngStyle\", \"click\"], [3, \"backgroundColor\", 4, \"ngIf\"]],\n    template: function TabsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, TabsComponent_div_1_Template, 3, 7, \"div\", 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵprojection(3);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.labels);\n      }\n    },\n    dependencies: [i1.NgForOf, i1.NgIf, i1.NgStyle],\n    styles: [\".header[_ngcontent-%COMP%]{display:flex;padding:0 8px;box-sizing:border-box;justify-content:flex-start;align-items:center;overflow-x:auto;font-size:16px;border-bottom:1px solid #323232}.header[_ngcontent-%COMP%]   .itemlabel[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center;padding:.5rem .65rem;min-height:48px;box-sizing:border-box;white-space:nowrap;text-transform:capitalize;cursor:pointer;opacity:.7}.header[_ngcontent-%COMP%]   .itemlabel.bottomLine[_ngcontent-%COMP%]{position:relative;opacity:1}.header[_ngcontent-%COMP%]   .itemlabel.bottomLine[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]{position:absolute;width:100%;bottom:0;height:3px}.body[_ngcontent-%COMP%]{padding:16px 8px}\"]\n  });\n  return TabsComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet BasicFiltersComponent = /*#__PURE__*/(() => {\n  class BasicFiltersComponent {\n    constructor() {\n      this.color = '';\n      this.changeFilter = new EventEmitter();\n      this.state = {\n        contrast: 1,\n        blur: 0,\n        brightness: 1,\n        grayscale: 0,\n        invert: 0,\n        saturate: 1,\n        sepia: 0\n      };\n      this.debounce = (callback, delay) => {\n        clearTimeout(this.timeout);\n        this.timeout = setTimeout(() => {\n          callback();\n          clearTimeout(this.timeout);\n        }, delay);\n      };\n    }\n    set filterState(value) {\n      if (value) {\n        this.state = JSON.parse(JSON.stringify({\n          ...this.state,\n          ...value\n        }));\n      } else {\n        this.state = {\n          contrast: 1,\n          blur: 0,\n          brightness: 1,\n          grayscale: 0,\n          invert: 0,\n          saturate: 1,\n          sepia: 0\n        };\n      }\n    }\n    ngOnInit() {}\n    onChange() {\n      this.debounce(() => {\n        this.changeFilter.next(this.state);\n      }, 150);\n    }\n  }\n  BasicFiltersComponent.ɵfac = function BasicFiltersComponent_Factory(t) {\n    return new (t || BasicFiltersComponent)();\n  };\n  BasicFiltersComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: BasicFiltersComponent,\n    selectors: [[\"lib-basic-filters\"]],\n    inputs: {\n      color: \"color\",\n      labels: \"labels\",\n      filterState: \"filterState\"\n    },\n    outputs: {\n      changeFilter: \"changeFilter\"\n    },\n    decls: 47,\n    vars: 36,\n    consts: [[2, \"display\", \"flex\", \"width\", \"100%\", \"justify-content\", \"space-between\"], [1, \"item-panel\"], [2, \"flex-direction\", \"row\", \"box-sizing\", \"border-box\", \"display\", \"flex\", \"place-content\", \"flex-start\", \"align-items\", \"flex-start\"], [\"type\", \"range\", \"min\", \"0\", \"max\", \"5\", \"step\", \"0.01\", 1, \"input-range\", 3, \"ngStyle\", \"ngModel\", \"input\", \"ngModelChange\"], [\"type\", \"range\", \"min\", \"0\", \"max\", \"1\", \"step\", \"0.01\", 1, \"input-range\", 3, \"ngStyle\", \"ngModel\", \"input\", \"ngModelChange\"], [\"type\", \"range\", \"min\", \"0\", \"max\", \"10\", \"step\", \"0.01\", 1, \"input-range\", 3, \"ngStyle\", \"ngModel\", \"input\", \"ngModelChange\"], [\"type\", \"range\", \"min\", \"0\", \"max\", \"20\", \"step\", \"1\", 1, \"input-range\", 3, \"ngStyle\", \"ngModel\", \"input\", \"ngModelChange\"]],\n    template: function BasicFiltersComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"p\", 1);\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"p\", 1);\n        i0.ɵɵtext(4);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(5, \"div\", 2)(6, \"input\", 3);\n        i0.ɵɵlistener(\"input\", function BasicFiltersComponent_Template_input_input_6_listener() {\n          return ctx.onChange();\n        })(\"ngModelChange\", function BasicFiltersComponent_Template_input_ngModelChange_6_listener($event) {\n          return ctx.state.contrast = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(7, \"br\");\n        i0.ɵɵelementStart(8, \"div\", 0)(9, \"p\", 1);\n        i0.ɵɵtext(10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"p\", 1);\n        i0.ɵɵtext(12);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(13, \"div\", 2)(14, \"input\", 3);\n        i0.ɵɵlistener(\"input\", function BasicFiltersComponent_Template_input_input_14_listener() {\n          return ctx.onChange();\n        })(\"ngModelChange\", function BasicFiltersComponent_Template_input_ngModelChange_14_listener($event) {\n          return ctx.state.brightness = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(15, \"br\");\n        i0.ɵɵelementStart(16, \"div\", 0)(17, \"p\", 1);\n        i0.ɵɵtext(18);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"p\", 1);\n        i0.ɵɵtext(20);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(21, \"div\", 2)(22, \"input\", 4);\n        i0.ɵɵlistener(\"input\", function BasicFiltersComponent_Template_input_input_22_listener() {\n          return ctx.onChange();\n        })(\"ngModelChange\", function BasicFiltersComponent_Template_input_ngModelChange_22_listener($event) {\n          return ctx.state.grayscale = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(23, \"br\");\n        i0.ɵɵelementStart(24, \"div\", 0)(25, \"p\", 1);\n        i0.ɵɵtext(26);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"p\", 1);\n        i0.ɵɵtext(28);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(29, \"div\", 2)(30, \"input\", 5);\n        i0.ɵɵlistener(\"input\", function BasicFiltersComponent_Template_input_input_30_listener() {\n          return ctx.onChange();\n        })(\"ngModelChange\", function BasicFiltersComponent_Template_input_ngModelChange_30_listener($event) {\n          return ctx.state.saturate = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(31, \"br\");\n        i0.ɵɵelementStart(32, \"div\", 0)(33, \"p\", 1);\n        i0.ɵɵtext(34);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(35, \"p\", 1);\n        i0.ɵɵtext(36);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(37, \"div\", 2)(38, \"input\", 4);\n        i0.ɵɵlistener(\"input\", function BasicFiltersComponent_Template_input_input_38_listener() {\n          return ctx.onChange();\n        })(\"ngModelChange\", function BasicFiltersComponent_Template_input_ngModelChange_38_listener($event) {\n          return ctx.state.sepia = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(39, \"br\");\n        i0.ɵɵelementStart(40, \"div\", 0)(41, \"p\", 1);\n        i0.ɵɵtext(42);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(43, \"p\", 1);\n        i0.ɵɵtext(44);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(45, \"div\", 2)(46, \"input\", 6);\n        i0.ɵɵlistener(\"input\", function BasicFiltersComponent_Template_input_input_46_listener() {\n          return ctx.onChange();\n        })(\"ngModelChange\", function BasicFiltersComponent_Template_input_ngModelChange_46_listener($event) {\n          return ctx.state.blur = $event;\n        });\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.labels[\"Contrast\"]);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(((ctx.state == null ? null : ctx.state.contrast) || 0).toFixed(2));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(24, _c2, ctx.color))(\"ngModel\", ctx.state.contrast);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(ctx.labels[\"Brightness\"]);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(((ctx.state == null ? null : ctx.state.brightness) || 0).toFixed(2));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(26, _c2, ctx.color))(\"ngModel\", ctx.state.brightness);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(ctx.labels[\"Grayscale\"]);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(((ctx.state == null ? null : ctx.state.grayscale) || 0).toFixed(2));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(28, _c2, ctx.color))(\"ngModel\", ctx.state.grayscale);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(ctx.labels[\"Saturate\"]);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(((ctx.state == null ? null : ctx.state.saturate) || 0).toFixed(2));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(30, _c2, ctx.color))(\"ngModel\", ctx.state.saturate);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(ctx.labels[\"Sepia\"]);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(((ctx.state == null ? null : ctx.state.sepia) || 0).toFixed(2));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(32, _c2, ctx.color))(\"ngModel\", ctx.state.sepia);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(ctx.labels[\"Blur\"]);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(((ctx.state == null ? null : ctx.state.blur) || 0).toFixed(2));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(34, _c2, ctx.color))(\"ngModel\", ctx.state.blur);\n      }\n    },\n    dependencies: [i1.NgStyle, i2.DefaultValueAccessor, i2.RangeValueAccessor, i2.NgControlStatus, i2.NgModel]\n  });\n  return BasicFiltersComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\"use strict\";\n/**\n * POLYFILLS\n */\n// Request Animation Frame polyfill\n(function () {\n  let lastTime = 0;\n  let vendors = ['ms', 'moz', 'webkit', 'o'];\n  for (let x = 0; x < vendors.length && !window.requestAnimationFrame; x++) {\n    window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n    window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];\n  }\n  if (!window.requestAnimationFrame) window.requestAnimationFrame = function (callback, element) {\n    let currTime = new Date().getTime();\n    let timeToCall = Math.max(0, 16 - (currTime - lastTime));\n    let id = window.setTimeout(function () {\n      callback(currTime + timeToCall);\n    }, timeToCall);\n    lastTime = currTime + timeToCall;\n    return id;\n  };\n  if (!window.cancelAnimationFrame) window.cancelAnimationFrame = function (id) {\n    clearTimeout(id);\n  };\n})();\n// CustomEvents polyfill\n(function () {\n  if (typeof window.CustomEvent === 'function') return false;\n  function CustomEvent(event, params) {\n    params = params || {\n      bubbles: false,\n      cancelable: false,\n      detail: undefined\n    };\n    let evt = document.createEvent('CustomEvent');\n    evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n    return evt;\n  }\n  CustomEvent.prototype = window.Event.prototype;\n  window.CustomEvent = CustomEvent;\n})();\n// MouseEvents polyfill\n(function (window) {\n  try {\n    new CustomEvent('test');\n    return false; // No need to polyfill\n  } catch (e) {\n    // Need to polyfill - fall through\n  }\n  // Polyfills DOM4 CustomEvent\n  function MouseEvent(eventType, params) {\n    params = params || {\n      bubbles: false,\n      cancelable: false\n    };\n    let mouseEvent = document.createEvent('MouseEvent');\n    mouseEvent.initMouseEvent(eventType, params.bubbles, params.cancelable, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n    return mouseEvent;\n  }\n  MouseEvent.prototype = Event.prototype;\n  window.MouseEvent = MouseEvent;\n})(window);\n\n/**\n * Handle component\n */\nclass Handle {\n  constructor(position, constraints, cursor, eventBus) {\n    var self = this;\n    this.position = position;\n    this.constraints = constraints;\n    this.cursor = cursor;\n    this.eventBus = eventBus;\n    // Create DOM element\n    this.el = document.createElement(\"div\");\n    this.el.className = \"croppr-handle\";\n    this.el.style.cursor = cursor;\n    // Attach initial listener\n    this.el.addEventListener(\"mousedown\", onMouseDown);\n    function onMouseDown(e) {\n      e.stopPropagation();\n      document.addEventListener(\"mouseup\", onMouseUp);\n      document.addEventListener(\"mousemove\", onMouseMove);\n      // Notify parent\n      self.eventBus.dispatchEvent(new CustomEvent(\"handlestart\", {\n        detail: {\n          handle: self\n        }\n      }));\n    }\n    function onMouseUp(e) {\n      e.stopPropagation();\n      document.removeEventListener(\"mouseup\", onMouseUp);\n      document.removeEventListener(\"mousemove\", onMouseMove);\n      // Notify parent\n      self.eventBus.dispatchEvent(new CustomEvent(\"handleend\", {\n        detail: {\n          handle: self\n        }\n      }));\n    }\n    function onMouseMove(e) {\n      e.stopPropagation();\n      // Notify parent\n      self.eventBus.dispatchEvent(new CustomEvent(\"handlemove\", {\n        detail: {\n          mouseX: e.clientX,\n          mouseY: e.clientY\n        }\n      }));\n    }\n  }\n}\n\n/**\n * Box component\n */\nclass Box {\n  constructor(x1, y1, x2, y2) {\n    this.x1 = x1;\n    this.y1 = y1;\n    this.x2 = x2;\n    this.y2 = y2;\n  }\n  /**\n   * Sets the new dimensions of the box.\n   * @param {Number} x1\n   * @param {Number} y1\n   * @param {Number} x2\n   * @param {Number} y2\n   */\n  set(x1 = null, y1 = null, x2 = null, y2 = null) {\n    this.x1 = x1 == null ? this.x1 : x1;\n    this.y1 = y1 == null ? this.y1 : y1;\n    this.x2 = x2 == null ? this.x2 : x2;\n    this.y2 = y2 == null ? this.y2 : y2;\n    return this;\n  }\n  /**\n   * Calculates the width of the box.\n   * @returns {Number}\n   */\n  width() {\n    return Math.abs(this.x2 - this.x1);\n  }\n  /**\n   * Calculates the height of the box.\n   * @returns {Number}\n   */\n  height() {\n    return Math.abs(this.y2 - this.y1);\n  }\n  /**\n   * Resizes the box to a new size.\n   * @param {Number} newWidth\n   * @param {Number} newHeight\n   * @param {Array} [origin] The origin point to resize from.\n   *      Defaults to [0, 0] (top left).\n   */\n  resize(newWidth, newHeight, origin = [0, 0]) {\n    const fromX = this.x1 + this.width() * origin[0];\n    const fromY = this.y1 + this.height() * origin[1];\n    this.x1 = fromX - newWidth * origin[0];\n    this.y1 = fromY - newHeight * origin[1];\n    this.x2 = this.x1 + newWidth;\n    this.y2 = this.y1 + newHeight;\n    return this;\n  }\n  /**\n   * Scale the box by a factor.\n   * @param {Number} factor\n   * @param {Array} [origin] The origin point to resize from.\n   *      Defaults to [0, 0] (top left).\n   */\n  scale(factor, origin = [0, 0]) {\n    const newWidth = this.width() * factor;\n    const newHeight = this.height() * factor;\n    this.resize(newWidth, newHeight, origin);\n    return this;\n  }\n  /**\n   * Move the box to the specified coordinates.\n   */\n  move(x = null, y = null) {\n    let width = this.width();\n    let height = this.height();\n    x = x === null ? this.x1 : x;\n    y = y === null ? this.y1 : y;\n    this.x1 = x;\n    this.y1 = y;\n    this.x2 = x + width;\n    this.y2 = y + height;\n    return this;\n  }\n  /**\n   * Get relative x and y coordinates of a given point within the box.\n   * @param {Array} point The x and y ratio position within the box.\n   * @returns {Array} The x and y coordinates [x, y].\n   */\n  getRelativePoint(point = [0, 0]) {\n    const x = this.width() * point[0];\n    const y = this.height() * point[1];\n    return [x, y];\n  }\n  /**\n   * Get absolute x and y coordinates of a given point within the box.\n   * @param {Array} point The x and y ratio position within the box.\n   * @returns {Array} The x and y coordinates [x, y].\n   */\n  getAbsolutePoint(point = [0, 0]) {\n    const x = this.x1 + this.width() * point[0];\n    const y = this.y1 + this.height() * point[1];\n    return [x, y];\n  }\n  /**\n   * Constrain the box to a fixed ratio.\n   * @param {Number} ratio\n   * @param {Array} [origin] The origin point to resize from.\n   *     Defaults to [0, 0] (top left).\n   * @param {String} [grow] The axis to grow to maintain the ratio.\n   *     Defaults to 'height'.\n   */\n  constrainToRatio(ratio, origin = [0, 0], grow = \"height\") {\n    if (ratio === null) {\n      return;\n    }\n    const width = this.width();\n    const height = this.height();\n    switch (grow) {\n      case \"height\":\n        // Grow height only\n        this.resize(this.width(), this.width() * ratio, origin);\n        break;\n      case \"width\":\n        // Grow width only\n        this.resize(this.height() * 1 / ratio, this.height(), origin);\n        break;\n      default:\n        // Default: Grow height only\n        this.resize(this.width(), this.width() * ratio, origin);\n    }\n    return this;\n  }\n  /**\n   * Constrain the box within a boundary.\n   * @param {Number} boundaryWidth\n   * @param {Number} boundaryHeight\n   * @param {Array} [origin] The origin point to resize from.\n   *     Defaults to [0, 0] (top left).\n   */\n  constrainToBoundary(boundaryWidth, boundaryHeight, origin = [0, 0]) {\n    // Calculate the maximum sizes for each direction of growth\n    const [originX, originY] = this.getAbsolutePoint(origin);\n    const maxIfLeft = originX;\n    const maxIfTop = originY;\n    const maxIfRight = boundaryWidth - originX;\n    const maxIfBottom = boundaryHeight - originY;\n    // Express the direction of growth in terms of left, both,\n    // and right as -1, 0, and 1 respectively. Ditto for top/both/down.\n    const directionX = -2 * origin[0] + 1;\n    const directionY = -2 * origin[1] + 1;\n    // Determine the max size to use according to the direction of growth.\n    let [maxWidth, maxHeight] = [null, null];\n    switch (directionX) {\n      case -1:\n        maxWidth = maxIfLeft;\n        break;\n      case 0:\n        maxWidth = Math.min(maxIfLeft, maxIfRight) * 2;\n        break;\n      case +1:\n        maxWidth = maxIfRight;\n        break;\n    }\n    switch (directionY) {\n      case -1:\n        maxHeight = maxIfTop;\n        break;\n      case 0:\n        maxHeight = Math.min(maxIfTop, maxIfBottom) * 2;\n        break;\n      case +1:\n        maxHeight = maxIfBottom;\n        break;\n    }\n    // Resize if the box exceeds the calculated max width/height.\n    if (this.width() > maxWidth) {\n      const factor = maxWidth / this.width();\n      this.scale(factor, origin);\n    }\n    if (this.height() > maxHeight) {\n      const factor = maxHeight / this.height();\n      this.scale(factor, origin);\n    }\n    return this;\n  }\n  /**\n   * Constrain the box to a maximum/minimum size.\n   * @param {Number} [maxWidth]\n   * @param {Number} [maxHeight]\n   * @param {Number} [minWidth]\n   * @param {Number} [minHeight]\n   * @param {Array} [origin] The origin point to resize from.\n   *     Defaults to [0, 0] (top left).\n   * @param {Number} [ratio] Ratio to maintain.\n   */\n  constrainToSize(maxWidth = null, maxHeight = null, minWidth = null, minHeight = null, origin = [0, 0], ratio = null) {\n    // Calculate new max/min widths & heights that constrains to the ratio\n    if (ratio) {\n      if (ratio > 1) {\n        maxWidth = maxHeight * 1 / ratio;\n        minHeight = minHeight * ratio;\n      } else if (ratio < 1) {\n        maxHeight = maxWidth * ratio;\n        minWidth = minHeight * 1 / ratio;\n      }\n    }\n    if (maxWidth && this.width() > maxWidth) {\n      const newWidth = maxWidth,\n        newHeight = ratio === null ? this.height() : maxHeight;\n      this.resize(newWidth, newHeight, origin);\n    }\n    if (maxHeight && this.height() > maxHeight) {\n      const newWidth = ratio === null ? this.width() : maxWidth,\n        newHeight = maxHeight;\n      this.resize(newWidth, newHeight, origin);\n    }\n    if (minWidth && this.width() < minWidth) {\n      const newWidth = minWidth,\n        newHeight = ratio === null ? this.height() : minHeight;\n      this.resize(newWidth, newHeight, origin);\n    }\n    if (minHeight && this.height() < minHeight) {\n      const newWidth = ratio === null ? this.width() : minWidth,\n        newHeight = minHeight;\n      this.resize(newWidth, newHeight, origin);\n    }\n    return this;\n  }\n}\n\n/**\n * Croppr Touch\n * Enables support for touch devices by translating touch events to\n * mouse events.\n */\n/**\n * Binds an element's touch events to be simulated as mouse events.\n * @param {Element} element\n */\nfunction enableTouch(element) {\n  element.addEventListener('touchstart', simulateMouseEvent);\n  element.addEventListener('touchend', simulateMouseEvent);\n  element.addEventListener('touchmove', simulateMouseEvent);\n}\n/**\n * Translates a touch event to a mouse event.\n * @param {Event} e\n */\nfunction simulateMouseEvent(e) {\n  e.preventDefault();\n  const touch = e.changedTouches[0];\n  const eventMap = {\n    touchstart: 'mousedown',\n    touchmove: 'mousemove',\n    touchend: 'mouseup'\n  };\n  touch.target.dispatchEvent(new MouseEvent(eventMap[e.type], {\n    bubbles: true,\n    cancelable: true,\n    view: window,\n    clientX: touch.clientX,\n    clientY: touch.clientY,\n    screenX: touch.screenX,\n    screenY: touch.screenY\n  }));\n}\n\n/**\n * CropprCore\n * Here lies the main logic.\n */\n/**\n * Define a list of handles to create.\n *\n * @property {Array} position - The x and y ratio position of the handle within\n *      the crop region. Accepts a value between 0 to 1 in the order of [X, Y].\n * @property {Array} constraints - Define the side of the crop region that is to\n *      be affected by this handle. Accepts a value of 0 or 1 in the order of\n *      [TOP, RIGHT, BOTTOM, LEFT].\n * @property {String} cursor - The CSS cursor of this handle.\n */\nconst HANDLES = [{\n  position: [0.0, 0.0],\n  constraints: [1, 0, 0, 1],\n  cursor: 'nw-resize'\n}, {\n  position: [0.5, 0.0],\n  constraints: [1, 0, 0, 0],\n  cursor: 'n-resize'\n}, {\n  position: [1.0, 0.0],\n  constraints: [1, 1, 0, 0],\n  cursor: 'ne-resize'\n}, {\n  position: [1.0, 0.5],\n  constraints: [0, 1, 0, 0],\n  cursor: 'e-resize'\n}, {\n  position: [1.0, 1.0],\n  constraints: [0, 1, 1, 0],\n  cursor: 'se-resize'\n}, {\n  position: [0.5, 1.0],\n  constraints: [0, 0, 1, 0],\n  cursor: 's-resize'\n}, {\n  position: [0.0, 1.0],\n  constraints: [0, 0, 1, 1],\n  cursor: 'sw-resize'\n}, {\n  position: [0.0, 0.5],\n  constraints: [0, 0, 0, 1],\n  cursor: 'w-resize'\n}];\n/**\n * Core class for Croppr containing most of its functional logic.\n */\nclass CropprCore {\n  constructor(element, options, deferred = false) {\n    this.regionEl = null;\n    // console.log(\"🚀 ~ file: core.ts ~ line 51 ~ CropprCore ~ constructor ~ element\", element)\n    // Parse options\n    this.options = CropprCore.parseOptions(options || {});\n    // Get target img element\n    if (!element.nodeName) {\n      element = document.querySelector(element);\n      // console.log(\"🚀 ~ file: core.ts ~ line 58 ~ CropprCore ~ constructor ~ element\", element)\n      if (element == null) {\n        throw 'Unable to find element.';\n      }\n    }\n    if (!element.getAttribute('src')) {\n      throw 'Image src not provided.';\n    }\n    // Define internal props\n    this._initialized = false;\n    this._restore = {\n      parent: element.parentNode,\n      element: element\n    };\n    // Wait until image is loaded before proceeding\n    if (!deferred) {\n      if (element.width === 0 || element.height === 0) {\n        element.onload = () => {\n          this.initialize(element);\n        };\n      } else {\n        this.initialize(element);\n      }\n    }\n  }\n  /**\n   * Initialize the Croppr instance\n   */\n  initialize(element) {\n    // Create DOM elements\n    this.createDOM(element);\n    // Process option values\n    this.options.convertToPixels(this.cropperEl);\n    // Listen for events from children\n    this.attachHandlerEvents();\n    this.attachRegionEvents();\n    this.attachOverlayEvents();\n    // Bootstrap this cropper instance\n    this.box = this.initializeBox(this.options);\n    this.redraw();\n    // Set the initalized flag to true and call the callback\n    this._initialized = true;\n    if (this.options.onInitialize !== null) {\n      this.options.onInitialize(this);\n    }\n  }\n  /**\n   * Create Croppr's DOM elements\n   */\n  createDOM(targetEl) {\n    // Create main container and use it as the main event listeners\n    this.containerEl = document.createElement('div');\n    this.containerEl.className = 'croppr-container';\n    this.eventBus = this.containerEl;\n    enableTouch(this.containerEl);\n    // Create cropper element\n    this.cropperEl = document.createElement('div');\n    this.cropperEl.className = 'croppr';\n    // Create image element\n    this.imageEl = document.createElement('img');\n    this.imageEl.setAttribute('src', targetEl.getAttribute('src'));\n    this.imageEl.setAttribute('alt', targetEl.getAttribute('alt'));\n    this.imageEl.className = 'croppr-image';\n    // Create clipped image element\n    this.imageClippedEl = this.imageEl.cloneNode();\n    this.imageClippedEl.className = 'croppr-imageClipped';\n    // Create region box element\n    this.regionEl = document.createElement('div');\n    this.regionEl.innerHTML = new Array(9).fill(1).map(() => `<div style=\"border: 1px dashed #fafafa\"></div>`).join('');\n    this.regionEl.className = 'croppr-region';\n    // Create overlay element\n    this.overlayEl = document.createElement('div');\n    this.overlayEl.className = 'croppr-overlay';\n    // Create handles element\n    let handleContainerEl = document.createElement('div');\n    handleContainerEl.className = 'croppr-handleContainer';\n    this.handles = [];\n    for (let i = 0; i < HANDLES.length; i++) {\n      const handle = new Handle(HANDLES[i].position, HANDLES[i].constraints, HANDLES[i].cursor, this.eventBus);\n      this.handles.push(handle);\n      handleContainerEl.appendChild(handle.el);\n    }\n    // And then we piece it all together!\n    this.cropperEl.appendChild(this.imageEl);\n    this.cropperEl.appendChild(this.imageClippedEl);\n    this.cropperEl.appendChild(this.regionEl);\n    this.cropperEl.appendChild(this.overlayEl);\n    this.cropperEl.appendChild(handleContainerEl);\n    this.containerEl.appendChild(this.cropperEl);\n    // And then finally insert it into the document\n    targetEl.parentElement.replaceChild(this.containerEl, targetEl);\n  }\n  /**\n   * Changes the image src.\n   * @param {String} src\n   */\n  setImage(src) {\n    // Add onload listener to reinitialize box\n    this.imageEl.onload = () => {\n      this.box = this.initializeBox(this.options);\n      this.redraw();\n    };\n    // Change image source\n    this.imageEl.src = src;\n    this.imageClippedEl.src = src;\n    return this;\n  }\n  /**\n   * Destroy the Croppr instance and replace with the original element.\n   */\n  destroy() {\n    this._restore.parent.replaceChild(this._restore.element, this.containerEl);\n  }\n  /**\n   * Create a new box region with a set of options.\n   * @param {Object} opts The options.\n   * @returns {Box}\n   */\n  initializeBox(opts) {\n    // Create initial box\n    const width = opts.startSize.width;\n    const height = opts.startSize.height;\n    let box = new Box(0, 0, width, height);\n    // console.log(\"🚀 ~ file: core.ts ~ line 202 ~ CropprCore ~ initializeBox ~ box\", box)\n    // Maintain ratio\n    box.constrainToRatio(opts.aspectRatio, [0.5, 0.5]);\n    // Maintain minimum/maximum size\n    const min = opts.minSize;\n    const max = opts.maxSize;\n    box.constrainToSize(max.width, max.height, min.width, min.height, [0.5, 0.5], opts.aspectRatio);\n    // Constrain to boundary\n    const parentWidth = this.cropperEl.offsetWidth;\n    const parentHeight = this.cropperEl.offsetHeight;\n    box.constrainToBoundary(parentWidth, parentHeight, [0.5, 0.5]);\n    // // Move to center\n    const x = this.cropperEl.offsetWidth / 2 - box.width() / 2;\n    const y = this.cropperEl.offsetHeight / 2 - box.height() / 2;\n    // console.log(\"🚀 ~ file: core.ts ~ line 219 ~ CropprCore ~ initializeBox ~ this.cropperEl\", this.cropperEl.offsetWidth)\n    // console.log(\"🚀 ~ file: core.ts ~ line 223 ~ CropprCore ~ initializeBox ~ x, y\", x, y)\n    box.move(x, y);\n    return box;\n  }\n  /**\n   * Draw visuals (border, handles, etc) for the current box.\n   */\n  redraw() {\n    // Round positional values to prevent subpixel coordinates, which can\n    // result in element that is rendered blurly\n    const width = Math.round(this.box.width()),\n      height = Math.round(this.box.height()),\n      x1 = Math.round(this.box.x1),\n      y1 = Math.round(this.box.y1),\n      x2 = Math.round(this.box.x2),\n      y2 = Math.round(this.box.y2);\n    window.requestAnimationFrame(() => {\n      // Update region element\n      if (!this.regionEl) return;\n      this.regionEl.style.transform = `translate(${x1}px, ${y1}px)`;\n      this.regionEl.style.width = width + 'px';\n      this.regionEl.style.height = height + 'px';\n      // Update clipped image element\n      this.imageClippedEl.style.clip = `rect(${y1}px, ${x2}px, ${y2}px, ${x1}px)`;\n      // Determine which handle to bring forward. The following code\n      // calculates the quadrant the box is in using bitwise operators.\n      // Reference: https://stackoverflow.com/questions/9718059\n      const center = this.box.getAbsolutePoint([0.5, 0.5]);\n      const xSign = center[0] - this.cropperEl.offsetWidth / 2 >> 31;\n      const ySign = center[1] - this.cropperEl.offsetHeight / 2 >> 31;\n      const quadrant = (xSign ^ ySign) + ySign + ySign + 4;\n      // The following equation calculates which handle index to bring\n      // forward. The equation is derived using algebra (if youre curious)\n      const foregroundHandleIndex = -2 * quadrant + 8;\n      // Update handle positions\n      for (let i = 0; i < this.handles.length; i++) {\n        let handle = this.handles[i];\n        // Calculate handle position\n        const handleWidth = handle.el.offsetWidth;\n        const handleHeight = handle.el.offsetHeight;\n        const left = x1 + width * handle.position[0] - handleWidth / 2;\n        const top = y1 + height * handle.position[1] - handleHeight / 2;\n        // Apply new position. The positional values are rounded to\n        // prevent subpixel positions which can result in a blurry element\n        handle.el.style.transform = `translate(${Math.round(left)}px, ${Math.round(top)}px)`;\n        handle.el.style.zIndex = foregroundHandleIndex == i ? 5 : 4;\n      }\n    });\n  }\n  /**\n   * Attach listeners for events emitted by the handles.\n   * Enables resizing of the region element.\n   */\n  attachHandlerEvents() {\n    const eventBus = this.eventBus;\n    eventBus.addEventListener('handlestart', this.onHandleMoveStart.bind(this));\n    eventBus.addEventListener('handlemove', this.onHandleMoveMoving.bind(this));\n    eventBus.addEventListener('handleend', this.onHandleMoveEnd.bind(this));\n  }\n  /**\n   * Attach event listeners for the crop region element.\n   * Enables dragging/moving of the region element.\n   */\n  attachRegionEvents() {\n    const eventBus = this.eventBus;\n    const self = this;\n    if (!this.regionEl) return;\n    this.regionEl.addEventListener('mousedown', onMouseDown);\n    eventBus.addEventListener('regionstart', this.onRegionMoveStart.bind(this));\n    eventBus.addEventListener('regionmove', this.onRegionMoveMoving.bind(this));\n    eventBus.addEventListener('regionend', this.onRegionMoveEnd.bind(this));\n    function onMouseDown(e) {\n      e.stopPropagation();\n      document.addEventListener('mouseup', onMouseUp);\n      document.addEventListener('mousemove', onMouseMove);\n      // Notify parent\n      eventBus.dispatchEvent(new CustomEvent('regionstart', {\n        detail: {\n          mouseX: e.clientX,\n          mouseY: e.clientY\n        }\n      }));\n    }\n    function onMouseMove(e) {\n      e.stopPropagation();\n      // Notify parent\n      eventBus.dispatchEvent(new CustomEvent('regionmove', {\n        detail: {\n          mouseX: e.clientX,\n          mouseY: e.clientY\n        }\n      }));\n    }\n    function onMouseUp(e) {\n      e.stopPropagation();\n      document.removeEventListener('mouseup', onMouseUp);\n      document.removeEventListener('mousemove', onMouseMove);\n      // Notify parent\n      eventBus.dispatchEvent(new CustomEvent('regionend', {\n        detail: {\n          mouseX: e.clientX,\n          mouseY: e.clientY\n        }\n      }));\n    }\n  }\n  /**\n   * Attach event listeners for the overlay element.\n   * Enables the creation of a new selection by dragging an empty area.\n   */\n  attachOverlayEvents() {\n    const SOUTHEAST_HANDLE_IDX = 4;\n    const self = this;\n    let tmpBox = null;\n    this.overlayEl.addEventListener('mousedown', onMouseDown);\n    function onMouseDown(e) {\n      e.stopPropagation();\n      document.addEventListener('mouseup', onMouseUp);\n      document.addEventListener('mousemove', onMouseMove);\n      // Calculate mouse's position in relative to the container\n      const container = self.cropperEl.getBoundingClientRect();\n      const mouseX = e.clientX - container.left;\n      const mouseY = e.clientY - container.top;\n      // Create new box at mouse position\n      tmpBox = self.box;\n      self.box = new Box(mouseX, mouseY, mouseX + 1, mouseY + 1);\n      // Activate the bottom right handle\n      self.eventBus.dispatchEvent(new CustomEvent('handlestart', {\n        detail: {\n          handle: self.handles[SOUTHEAST_HANDLE_IDX]\n        }\n      }));\n    }\n    function onMouseMove(e) {\n      e.stopPropagation();\n      self.eventBus.dispatchEvent(new CustomEvent('handlemove', {\n        detail: {\n          mouseX: e.clientX,\n          mouseY: e.clientY\n        }\n      }));\n    }\n    function onMouseUp(e) {\n      e.stopPropagation();\n      document.removeEventListener('mouseup', onMouseUp);\n      document.removeEventListener('mousemove', onMouseMove);\n      // If the new box has no width and height, it suggests that\n      // the user had just clicked on an empty area and did not drag\n      // a new box (ie. an accidental click). In this scenario, we\n      // simply replace it with the previous box.\n      if (self.box.width() === 1 && self.box.height() === 1) {\n        self.box = tmpBox;\n        return;\n      }\n      self.eventBus.dispatchEvent(new CustomEvent('handleend', {\n        detail: {\n          mouseX: e.clientX,\n          mouseY: e.clientY\n        }\n      }));\n    }\n  }\n  /**\n   * EVENT HANDLER\n   * Executes when user begins dragging a handle.\n   */\n  onHandleMoveStart(e) {\n    let handle = e.detail.handle;\n    // The origin point is the point where the box is scaled from.\n    // This is usually the opposite side/corner of the active handle.\n    const originPoint = [1 - handle.position[0], 1 - handle.position[1]];\n    let [originX, originY] = this.box.getAbsolutePoint(originPoint);\n    this.activeHandle = {\n      handle,\n      originPoint,\n      originX,\n      originY\n    };\n    // Trigger callback\n    if (this.options.onCropStart !== null) {\n      this.options.onCropStart(this.getValue());\n    }\n  }\n  /**\n   * EVENT HANDLER\n   * Executes on handle move. Main logic to manage the movement of handles.\n   */\n  onHandleMoveMoving(e) {\n    let {\n      mouseX,\n      mouseY\n    } = e.detail;\n    // Calculate mouse's position in relative to the container\n    let container = this.cropperEl.getBoundingClientRect();\n    mouseX = mouseX - container.left;\n    mouseY = mouseY - container.top;\n    // Ensure mouse is within the boundaries\n    if (mouseX < 0) {\n      mouseX = 0;\n    } else if (mouseX > container.width) {\n      mouseX = container.width;\n    }\n    if (mouseY < 0) {\n      mouseY = 0;\n    } else if (mouseY > container.height) {\n      mouseY = container.height;\n    }\n    // Bootstrap helper variables\n    let origin = this.activeHandle.originPoint.slice();\n    const originX = this.activeHandle.originX;\n    const originY = this.activeHandle.originY;\n    const handle = this.activeHandle.handle;\n    const TOP_MOVABLE = handle.constraints[0] === 1;\n    const RIGHT_MOVABLE = handle.constraints[1] === 1;\n    const BOTTOM_MOVABLE = handle.constraints[2] === 1;\n    const LEFT_MOVABLE = handle.constraints[3] === 1;\n    const MULTI_AXIS = (LEFT_MOVABLE || RIGHT_MOVABLE) && (TOP_MOVABLE || BOTTOM_MOVABLE);\n    // Apply movement to respective sides according to the handle's\n    // constraint values.\n    let x1 = LEFT_MOVABLE || RIGHT_MOVABLE ? originX : this.box.x1;\n    let x2 = LEFT_MOVABLE || RIGHT_MOVABLE ? originX : this.box.x2;\n    let y1 = TOP_MOVABLE || BOTTOM_MOVABLE ? originY : this.box.y1;\n    let y2 = TOP_MOVABLE || BOTTOM_MOVABLE ? originY : this.box.y2;\n    x1 = LEFT_MOVABLE ? mouseX : x1;\n    x2 = RIGHT_MOVABLE ? mouseX : x2;\n    y1 = TOP_MOVABLE ? mouseY : y1;\n    y2 = BOTTOM_MOVABLE ? mouseY : y2;\n    // Check if the user dragged past the origin point. If it did,\n    // we set the flipped flag to true.\n    let [isFlippedX, isFlippedY] = [false, false];\n    if (LEFT_MOVABLE || RIGHT_MOVABLE) {\n      isFlippedX = LEFT_MOVABLE ? mouseX > originX : mouseX < originX;\n    }\n    if (TOP_MOVABLE || BOTTOM_MOVABLE) {\n      isFlippedY = TOP_MOVABLE ? mouseY > originY : mouseY < originY;\n    }\n    // If it is flipped, we swap the coordinates and flip the origin point.\n    if (isFlippedX) {\n      const tmp = x1;\n      x1 = x2;\n      x2 = tmp; // Swap x1 and x2\n      origin[0] = 1 - origin[0]; // Flip origin x point\n    }\n\n    if (isFlippedY) {\n      const tmp = y1;\n      y1 = y2;\n      y2 = tmp; // Swap y1 and y2\n      origin[1] = 1 - origin[1]; // Flip origin y point\n    }\n    // Create new box object\n    let box = new Box(x1, y1, x2, y2);\n    // Maintain aspect ratio\n    if (this.options.aspectRatio) {\n      const ratio = this.options.aspectRatio;\n      let isVerticalMovement = false;\n      if (MULTI_AXIS) {\n        isVerticalMovement = mouseY > box.y1 + ratio * box.width() || mouseY < box.y2 - ratio * box.width();\n      } else if (TOP_MOVABLE || BOTTOM_MOVABLE) {\n        isVerticalMovement = true;\n      }\n      const ratioMode = isVerticalMovement ? 'width' : 'height';\n      box.constrainToRatio(ratio, origin, ratioMode);\n    }\n    // Maintain minimum/maximum size\n    const min = this.options.minSize;\n    const max = this.options.maxSize;\n    box.constrainToSize(max.width, max.height, min.width, min.height, origin, this.options.aspectRatio);\n    // Constrain to boundary\n    const parentWidth = this.cropperEl.offsetWidth;\n    const parentHeight = this.cropperEl.offsetHeight;\n    box.constrainToBoundary(parentWidth, parentHeight, origin);\n    // Finally, update the visuals (border, handles, clipped image, etc)\n    this.box = box;\n    this.redraw();\n    // Trigger callback\n    if (this.options.onCropMove !== null) {\n      this.options.onCropMove(this.getValue());\n    }\n  }\n  /**\n   * EVENT HANDLER\n   * Executes on handle move end.\n   */\n  onHandleMoveEnd(e) {\n    // Trigger callback\n    if (this.options.onCropEnd !== null) {\n      this.options.onCropEnd(this.getValue());\n    }\n  }\n  /**\n   * EVENT HANDLER\n   * Executes when user starts moving the crop region.\n   */\n  onRegionMoveStart(e) {\n    let {\n      mouseX,\n      mouseY\n    } = e.detail;\n    // Calculate mouse's position in relative to the container\n    let container = this.cropperEl.getBoundingClientRect();\n    mouseX = mouseX - container.left;\n    mouseY = mouseY - container.top;\n    this.currentMove = {\n      offsetX: mouseX - this.box.x1,\n      offsetY: mouseY - this.box.y1\n    };\n    // Trigger callback\n    if (this.options.onCropStart !== null) {\n      this.options.onCropStart(this.getValue());\n    }\n  }\n  /**\n   * EVENT HANDLER\n   * Executes when user moves the crop region.\n   */\n  onRegionMoveMoving(e) {\n    let {\n      mouseX,\n      mouseY\n    } = e.detail;\n    let {\n      offsetX,\n      offsetY\n    } = this.currentMove;\n    // Calculate mouse's position in relative to the container\n    let container = this.cropperEl.getBoundingClientRect();\n    mouseX = mouseX - container.left;\n    mouseY = mouseY - container.top;\n    this.box.move(mouseX - offsetX, mouseY - offsetY);\n    // Ensure box is within the boundaries\n    if (this.box.x1 < 0) {\n      this.box.move(0, null);\n    }\n    if (this.box.x2 > container.width) {\n      this.box.move(container.width - this.box.width(), null);\n    }\n    if (this.box.y1 < 0) {\n      this.box.move(null, 0);\n    }\n    if (this.box.y2 > container.height) {\n      this.box.move(null, container.height - this.box.height());\n    }\n    // Update visuals\n    this.redraw();\n    // Trigger callback\n    if (this.options.onCropMove !== null) {\n      this.options.onCropMove(this.getValue());\n    }\n  }\n  /**\n   * EVENT HANDLER\n   * Executes when user stops moving the crop region (mouse up).\n   */\n  onRegionMoveEnd(e) {\n    // Trigger callback\n    if (this.options.onCropEnd !== null) {\n      this.options.onCropEnd(this.getValue());\n    }\n  }\n  /**\n   * Calculate the value of the crop region.\n   */\n  getValue(mode = null) {\n    if (mode === null) {\n      mode = this.options.returnMode;\n    }\n    if (mode == 'real') {\n      const actualWidth = this.imageEl.naturalWidth;\n      const actualHeight = this.imageEl.naturalHeight;\n      const {\n        width: elementWidth,\n        height: elementHeight\n      } = this.imageEl.getBoundingClientRect();\n      const factorX = actualWidth / elementWidth;\n      const factorY = actualHeight / elementHeight;\n      return {\n        x: Math.round(this.box.x1 * factorX),\n        y: Math.round(this.box.y1 * factorY),\n        width: Math.round(this.box.width() * factorX),\n        height: Math.round(this.box.height() * factorY)\n      };\n    } else if (mode == 'ratio') {\n      const {\n        width: elementWidth,\n        height: elementHeight\n      } = this.imageEl.getBoundingClientRect();\n      return {\n        x: round(this.box.x1 / elementWidth, 3),\n        y: round(this.box.y1 / elementHeight, 3),\n        width: round(this.box.width() / elementWidth, 3),\n        height: round(this.box.height() / elementHeight, 3)\n      };\n    } else if (mode == 'raw') {\n      return {\n        x: Math.round(this.box.x1),\n        y: Math.round(this.box.y1),\n        width: Math.round(this.box.width()),\n        height: Math.round(this.box.height())\n      };\n    }\n  }\n  /**\n   * Parse user options and set default values.\n   */\n  static parseOptions(opts) {\n    const defaults = {\n      aspectRatio: null,\n      maxSize: {\n        width: null,\n        height: null\n      },\n      minSize: {\n        width: null,\n        height: null\n      },\n      startSize: {\n        width: 100,\n        height: 100,\n        unit: '%'\n      },\n      returnMode: 'real',\n      onInitialize: null,\n      onCropStart: null,\n      onCropMove: null,\n      onCropEnd: null\n    };\n    // Parse aspect ratio\n    let aspectRatio = null;\n    if (opts.aspectRatio !== undefined) {\n      if (typeof opts.aspectRatio === 'number') {\n        aspectRatio = opts.aspectRatio;\n      } else if (opts.aspectRatio instanceof Array) {\n        aspectRatio = opts.aspectRatio[1] / opts.aspectRatio[0];\n      }\n    }\n    // Parse max width/height\n    let maxSize = null;\n    if (opts.maxSize !== undefined && opts.maxSize !== null) {\n      maxSize = {\n        width: opts.maxSize[0] || null,\n        height: opts.maxSize[1] || null,\n        unit: opts.maxSize[2] || 'px'\n      };\n    }\n    // Parse min width/height\n    let minSize = null;\n    if (opts.minSize !== undefined && opts.minSize !== null) {\n      minSize = {\n        width: opts.minSize[0] || null,\n        height: opts.minSize[1] || null,\n        unit: opts.minSize[2] || 'px'\n      };\n    }\n    // Parse start size\n    let startSize = null;\n    if (opts.startSize !== undefined && opts.startSize !== null) {\n      startSize = {\n        width: opts.startSize[0] || null,\n        height: opts.startSize[1] || null,\n        unit: opts.startSize[2] || '%'\n      };\n    }\n    // Parse callbacks\n    let onInitialize = null;\n    if (typeof opts.onInitialize === 'function') {\n      onInitialize = opts.onInitialize;\n    }\n    let onCropStart = null;\n    if (typeof opts.onCropStart === 'function') {\n      onCropStart = opts.onCropStart;\n    }\n    let onCropEnd = null;\n    if (typeof opts.onCropEnd === 'function') {\n      onCropEnd = opts.onCropEnd;\n    }\n    let onCropMove = null;\n    if (typeof opts.onUpdate === 'function') {\n      // DEPRECATED: onUpdate is deprecated to create a more uniform\n      // callback API, such as: onCropStart, onCropMove, onCropEnd\n      console.warn('Croppr.js: `onUpdate` is deprecated and will be removed in the next major release. Please use `onCropMove` or `onCropEnd` instead.');\n      onCropMove = opts.onUpdate;\n    }\n    if (typeof opts.onCropMove === 'function') {\n      onCropMove = opts.onCropMove;\n    }\n    // Parse returnMode value\n    let returnMode = null;\n    if (opts.returnMode !== undefined) {\n      const s = opts.returnMode.toLowerCase();\n      if (['real', 'ratio', 'raw'].indexOf(s) === -1) {\n        throw 'Invalid return mode.';\n      }\n      returnMode = s;\n    }\n    // Create function to convert % values to pixels\n    const convertToPixels = function (container) {\n      const width = container.offsetWidth;\n      const height = container.offsetHeight;\n      // Convert sizes\n      const sizeKeys = ['maxSize', 'minSize', 'startSize'];\n      for (let i = 0; i < sizeKeys.length; i++) {\n        const key = sizeKeys[i];\n        if (this[key] !== null) {\n          if (this[key].unit == '%') {\n            if (this[key].width !== null) {\n              this[key].width = this[key].width / 100 * width;\n            }\n            if (this[key].height !== null) {\n              this[key].height = this[key].height / 100 * height;\n            }\n          }\n          delete this[key].unit;\n        }\n      }\n    };\n    const defaultValue = (v, d) => v !== null ? v : d;\n    return {\n      aspectRatio: defaultValue(aspectRatio, defaults.aspectRatio),\n      maxSize: defaultValue(maxSize, defaults.maxSize),\n      minSize: defaultValue(minSize, defaults.minSize),\n      startSize: defaultValue(startSize, defaults.startSize),\n      returnMode: defaultValue(returnMode, defaults.returnMode),\n      onInitialize: defaultValue(onInitialize, defaults.onInitialize),\n      onCropStart: defaultValue(onCropStart, defaults.onCropStart),\n      onCropMove: defaultValue(onCropMove, defaults.onCropMove),\n      onCropEnd: defaultValue(onCropEnd, defaults.onCropEnd),\n      convertToPixels: convertToPixels\n    };\n  }\n}\n/**\n * HELPER FUNCTIONS\n */\nfunction round(value, decimals) {\n  return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);\n}\n\n/**\n * Croppr.js\n * https://github.com/jamesssooi/Croppr.js\n *\n * A JavaScript image cropper that's lightweight, awesome, and has\n * zero dependencies.\n *\n * (C) 2017 James Ooi. Released under the MIT License.\n */\n/**\n * This class is a wrapper for CropprCore that merely implements the main\n * interfaces for the Croppr instance. Look into CropprCore for all the\n * main logic.\n */\nclass Croppr extends CropprCore {\n  /**\n   * @constructor\n   * Calls the CropprCore's constructor.\n   */\n  constructor(element, options, _deferred = false) {\n    super(element, options, _deferred);\n  }\n  /**\n   * Gets the value of the crop region.\n   * @param {String} [mode] Which mode of calculation to use: 'real', 'ratio' or\n   *      'raw'.\n   */\n  getValue(mode) {\n    return super.getValue(mode);\n  }\n  /**\n   * Changes the image src.\n   * @param {String} src\n   */\n  setImage(src) {\n    return super.setImage(src);\n  }\n  /**\n   * Destroys the Croppr instance\n   */\n  destroy() {\n    return super.destroy();\n  }\n  /**\n   * Moves the crop region to a specified coordinate.\n   * @param {Number} x\n   * @param {Number} y\n   */\n  moveTo(x, y) {\n    this.box.move(x, y);\n    this.redraw();\n    // Call the callback\n    if (this.options.onCropEnd !== null) {\n      this.options.onCropEnd(this.getValue());\n    }\n    return this;\n  }\n  /**\n   * Resizes the crop region to a specified width and height.\n   * @param {Number} width\n   * @param {Number} height\n   * @param {Array} origin The origin point to resize from.\n   *      Defaults to [0.5, 0.5] (center).\n   */\n  resizeTo(width, height, origin = [0.5, 0.5]) {\n    this.box.resize(width, height, origin);\n    //////////////////////////////////////////////////////////////////\n    const parentWidth = this.cropperEl.offsetWidth;\n    const parentHeight = this.cropperEl.offsetHeight;\n    this.box.constrainToBoundary(parentWidth, parentHeight, [0.5, 0.5]);\n    ///////////////////////////////////////////////////////////////////\n    this.redraw();\n    // Call the callback\n    if (this.options.onCropEnd !== null) {\n      this.options.onCropEnd(this.getValue());\n    }\n    return this;\n  }\n  /**\n   * Scale the crop region by a factor.\n   * @param {Number} factor\n   * @param {Array} origin The origin point to resize from.\n   *      Defaults to [0.5, 0.5] (center).\n   */\n  scaleBy(factor, origin = [0.5, 0.5]) {\n    this.box.scale(factor, origin);\n    this.redraw();\n    // Call the callback\n    if (this.options.onCropEnd !== null) {\n      this.options.onCropEnd(this.getValue());\n    }\n    return this;\n  }\n  /**\n   * Resets the crop region to the initial settings.\n   */\n  reset(newOptions) {\n    if (newOptions) {\n      this.options = {\n        ...this.options,\n        newOptions\n      };\n    }\n    this.box = this.initializeBox(this.options);\n    // console.log('🚀 ~ file: croppr.ts ~ line 110 ~ Croppr ~ reset ~ this.box', this.box);\n    this.redraw();\n    // Call the callback\n    if (this.options.onCropEnd !== null) {\n      this.options.onCropEnd(this.getValue());\n    }\n    return this;\n  }\n  enableVisibility(state) {\n    let croppContainer = document.querySelector(\".croppr-container\");\n    if (!croppContainer) throw new Error(\"THere is not any croppr\");\n    if (state) {\n      croppContainer.style.display = \"block\";\n    } else {\n      croppContainer.style.display = \"none\";\n    }\n  }\n}\nlet CropperWrapperComponent = /*#__PURE__*/(() => {\n  class CropperWrapperComponent {\n    constructor() {\n      this.imageSrc = '';\n      this.croppr = null;\n      this.croppSize = {\n        width: 150,\n        height: 150\n      };\n      this.croppUpdate = new EventEmitter();\n    }\n    onKeyDown() {\n      if (!this.croppr) return;\n      this.croppr.options.aspectRatio = 1.0;\n    }\n    onKeyUp() {\n      if (!this.croppr) return;\n      this.croppr.options.aspectRatio = null;\n    }\n    set _imageSrc(value) {\n      this.imageSrc = value;\n    }\n    set setSize(value) {\n      this.croppSize = value;\n      if (this.croppr) this.croppr.resizeTo(this.croppSize.width, this.croppSize.height);\n    }\n    ngOnInit() {}\n    ngAfterViewInit() {\n      this.croppr = new Croppr('#croppr', {\n        minSize: [32, 32, 'px'],\n        startSize: [this.croppSize.width, this.croppSize.height, 'px'],\n        onInitialize: data => {\n          this.croppUpdate.emit(data.getValue());\n        },\n        onCropEnd: data => {\n          this.croppUpdate.emit(data);\n        }\n      });\n    }\n    ngOnDestroy() {\n      if (!this.croppr) return;\n      this.croppr.destroy();\n    }\n  }\n  CropperWrapperComponent.ɵfac = function CropperWrapperComponent_Factory(t) {\n    return new (t || CropperWrapperComponent)();\n  };\n  CropperWrapperComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: CropperWrapperComponent,\n    selectors: [[\"lib-cropper-wrapper\"]],\n    hostBindings: function CropperWrapperComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keydown.Control\", function CropperWrapperComponent_keydown_Control_HostBindingHandler($event) {\n          return ctx.onKeyDown($event);\n        }, false, i0.ɵɵresolveDocument)(\"keyup.Control\", function CropperWrapperComponent_keyup_Control_HostBindingHandler($event) {\n          return ctx.onKeyUp($event);\n        }, false, i0.ɵɵresolveDocument);\n      }\n    },\n    inputs: {\n      _imageSrc: \"_imageSrc\",\n      setSize: \"setSize\"\n    },\n    outputs: {\n      croppUpdate: \"croppUpdate\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[\"id\", \"image-full\", \"id\", \"croppr\", 3, \"src\"]],\n    template: function CropperWrapperComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"img\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"src\", ctx.imageSrc, i0.ɵɵsanitizeUrl);\n      }\n    }\n  });\n  return CropperWrapperComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n// const Croppr = require('../../services/croppr-service')\nlet EditImageComponent = /*#__PURE__*/(() => {\n  class EditImageComponent {\n    constructor(chRef) {\n      this.chRef = chRef;\n      this.imageSrc = '';\n      this.color = '';\n      this.controlPanelIndex = 0;\n      this.showCrop = false;\n      this.observer = null;\n      this.allFormats = ['webp', 'jpeg', 'png'];\n      this.initialState = {};\n      this.state = {\n        quality: 92,\n        maxHeight: 1000,\n        maxWidth: 1000,\n        cropHeight: 150,\n        cropWidth: 150,\n        maintainAspectRatio: true,\n        format: 'jpeg',\n        arrayCopiedImages: [],\n        originImageSrc: ''\n      };\n      this.croppSize = {\n        width: 150,\n        height: 150\n      };\n      this.isMobile = false;\n      this.closeModal = new EventEmitter();\n    }\n    ngOnInit() {\n      this.state = JSON.parse(JSON.stringify({\n        ...this.state,\n        ...this.initialState\n      }));\n      this.isMobile = window.innerWidth < 800;\n    }\n    onCloseEditPanel(saveChanges = false) {\n      if (this.observer instanceof ResizeObserver) {\n        let imageCroperElRef = document.getElementById('image-croper');\n        let imageFullElRef = document.getElementById('image-full');\n        this.observer.unobserve(imageCroperElRef);\n        this.observer.unobserve(imageFullElRef);\n      }\n      this.showCrop = false;\n      if (saveChanges) this.closeModal.next({\n        state: this.state,\n        imageSrc: this.imageSrc\n      });else this.closeModal.next(null);\n    }\n    onControlPanelIndexChange(idex) {\n      this.controlPanelIndex = idex;\n    }\n    calculateSize() {\n      if (this.imageSrc && this.imageSrc.length) {\n        return Math.ceil(3 / 4 * this.imageSrc.length / 1024);\n      } else {\n        return \"\";\n      }\n    }\n    onChangeSize(changeHeight = false) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        try {\n          _this.imageSrc = yield convertImageUsingCanvas(_this.state.originImageSrc, changeHeight, _this.state);\n          _this.chRef.markForCheck();\n        } catch (error) {\n          console.error('🚀 ~ file: edit-image.component.ts ~ line 76 ~ EditImageComponent ~ onChangeSize ~ error', error);\n          _this.chRef.markForCheck();\n        }\n      })();\n    }\n    onChangeQuality() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          _this2.imageSrc = yield convertImageUsingCanvas(_this2.state.originImageSrc, false, _this2.state);\n          _this2.chRef.markForCheck();\n        } catch (error) {\n          console.error('🚀 ~ file: edit-image.component.ts ~ line 86 ~ EditImageComponent ~ onChangeQuality ~ error', error);\n          _this2.chRef.markForCheck();\n        }\n      })();\n    }\n    onChangeFormat() {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          _this3.imageSrc = yield convertImageUsingCanvas(_this3.state.originImageSrc, false, _this3.state);\n          _this3.chRef.markForCheck();\n        } catch (error) {\n          console.error('🚀 ~ file: edit-image.component.ts ~ line 98 ~ EditImageComponent ~ onChangeFormat ~ error', error);\n          _this3.chRef.markForCheck();\n        }\n      })();\n    }\n    onRestore() {\n      var _this4 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          if (_this4.state.arrayCopiedImages.length > 1) {\n            _this4.state.arrayCopiedImages.pop();\n            let newValue = _this4.state.arrayCopiedImages[_this4.state.arrayCopiedImages.length - 1];\n            _this4.state = {\n              ..._this4.state,\n              maxHeight: newValue.height,\n              maxWidth: newValue.width,\n              quality: newValue.quality,\n              format: newValue.format,\n              originImageSrc: newValue.originImageSrc,\n              basicFilters: newValue.basicFilters\n            };\n            _this4.imageSrc = newValue.lastImage;\n            _this4.chRef.markForCheck();\n          }\n        } catch (e) {\n          console.error('🚀 ~ file: edit-image.component.ts ~ line 126 ~ EditImageComponent ~ onRestore ~ e', e);\n        }\n      })();\n    }\n    onCroppUpdate(data) {\n      this.croppState = data;\n      this.state.cropHeight = data.height;\n      this.state.cropWidth = data.width;\n    }\n    onChangeCrop() {\n      this.croppSize = {\n        width: this.state.cropWidth,\n        height: this.state.cropHeight\n      };\n    }\n    onCrop() {\n      // const dataHolderRect = document.querySelector('.croppr-container').getBoundingClientRect();\n      const canvas = document.createElement('canvas');\n      return new Promise((resolve, reject) => {\n        let ctx = canvas.getContext('2d');\n        let image = new Image();\n        image.src = this.imageSrc;\n        image.onload = () => {\n          // let ratio = image.height / dataHolderRect.height;\n          let newWidth = this.croppState?.width;\n          let newHeight = this.croppState?.height;\n          canvas.height = newHeight;\n          canvas.width = newWidth;\n          ctx.drawImage(image, Math.abs(this.croppState?.x || 0), Math.abs(this.croppState?.y || 0), this.croppState?.width || 0, this.croppState?.height || 0, 0, 0, this.croppState?.width || 0, this.croppState?.height || 0);\n          return resolve(canvas.toDataURL(`image/${this.state.format}`, this.state.quality));\n        };\n        image.onerror = e => {\n          reject(e);\n        };\n      }).then(dataUri => {\n        this.imageSrc = dataUri;\n        this.showCrop = false;\n        this.state.maxWidth = canvas.width;\n        this.state.maxHeight = canvas.height;\n        this.state.originImageSrc = dataUri;\n        this.state.cropHeight = 150;\n        this.state.cropWidth = 150;\n        saveState(this.state, dataUri);\n        this.croppSize = {\n          width: 150,\n          height: 150\n        };\n        this.chRef.markForCheck();\n      }).catch(e => {\n        console.error(e);\n      });\n    }\n    onChangeFilters(data) {\n      var _this5 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          if (!_this5.state.basicFilters) {\n            _this5.state.basicFilters = data;\n          } else {\n            _this5.state.basicFilters = {\n              ..._this5.state.basicFilters,\n              ...data\n            };\n          }\n          _this5.imageSrc = yield convertImageUsingCanvas(_this5.state.originImageSrc, false, _this5.state);\n          _this5.chRef.markForCheck();\n        } catch (e) {\n          console.error('🚀 ~ file: edit-image.component.ts ~ line 250 ~ EditImageComponent ~ onChangeFilters ~ e', e);\n        }\n      })();\n    }\n  }\n  EditImageComponent.ɵfac = function EditImageComponent_Factory(t) {\n    return new (t || EditImageComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  EditImageComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: EditImageComponent,\n    selectors: [[\"lib-edit-image\"]],\n    inputs: {\n      labels: \"labels\",\n      imageSrc: \"imageSrc\",\n      color: \"color\",\n      initialState: \"initialState\"\n    },\n    outputs: {\n      closeModal: \"closeModal\"\n    },\n    decls: 20,\n    vars: 13,\n    consts: [[\"id\", \"popup\", 1, \"popup\"], [2, \"flex-direction\", \"row\", \"box-sizing\", \"border-box\", \"display\", \"flex\", \"place-content\", \"center flex-end\", \"align-items\", \"center\", \"padding\", \"0px 16px\"], [1, \"icon-btn\", 3, \"click\"], [1, \"material-icons\"], [1, \"image-container\"], [1, \"image-holder-full\"], [\"id\", \"image-full\", 3, \"src\"], [3, \"setSize\", \"_imageSrc\", \"croppUpdate\", 4, \"ngIf\"], [1, \"control-panel\"], [3, \"color\", \"_labels\", \"indexActivatedChange\"], [4, \"ngIf\"], [1, \"icon-btn\", 2, \"position\", \"absolute\", \"right\", \"10px\", \"top\", \"30px\", 3, \"title\", \"disabled\", \"click\"], [2, \"flex-direction\", \"row\", \"box-sizing\", \"border-box\", \"display\", \"flex\", \"place-content\", \"center space-between\", \"align-items\", \"center\", \"margin-top\", \"8px\"], [1, \"save-btn\", 3, \"click\"], [\"class\", \"caption image-caption\", 3, \"ngStyle\", 4, \"ngIf\"], [3, \"setSize\", \"_imageSrc\", \"croppUpdate\"], [2, \"display\", \"flex\", \"justify-content\", \"space-between\", \"margin-bottom\", \"8px\"], [2, \"display\", \"flex\", \"align-items\", \"center\"], [\"type\", \"checkbox\", 2, \"margin-bottom\", \"3px\", 3, \"ngModel\", \"ngModelChange\"], [1, \"item-panel\", 2, \"margin-left\", \"4px\"], [2, \"display\", \"flex\", \"width\", \"100%\", \"justify-content\", \"space-between\"], [1, \"item-panel\"], [2, \"flex-direction\", \"row\", \"box-sizing\", \"border-box\", \"display\", \"flex\", \"place-content\", \"flex-start\", \"align-items\", \"flex-start\"], [\"type\", \"range\", \"min\", \"1\", \"max\", \"100\", \"value\", \"50\", 1, \"input-range\", 3, \"readonly\", \"disabled\", \"ngStyle\", \"ngModel\", \"change\", \"ngModelChange\"], [1, \"item-panel\", 2, \"display\", \"flex\", \"width\", \"100%\", \"justify-content\", \"space-between\"], [\"type\", \"checkbox\", 3, \"readonly\", \"disabled\", \"ngModel\", \"ngModelChange\"], [1, \"caption\"], [2, \"margin-top\", \"8px !important\", \"flex-flow\", \"row wrap\", \"box-sizing\", \"border-box\", \"display\", \"flex\", \"place-content\", \"flex-start space-between\", \"align-items\", \"flex-start\"], [1, \"form-field\", 2, \"max-width\", \"48%\", \"width\", \"48%\"], [\"type\", \"number\", 3, \"readonly\", \"disabled\", \"placeholder\", \"ngModel\", \"min\", \"max\", \"change\", \"ngModelChange\"], [2, \"margin-top\", \"8px !important\", \"flex-direction\", \"row\", \"box-sizing\", \"border-box\", \"display\", \"flex\", \"place-content\", \"flex-start\", \"align-items\", \"flex-start\"], [1, \"form-field\", 2, \"width\", \"100%\"], [3, \"disabled\", \"ngModel\", \"ngModelChange\", \"change\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"], [1, \"form-field\", 2, \"max-width\", \"48%\", \"width\", \"48%\", \"margin-bottom\", \"8px\"], [\"type\", \"number\", 3, \"placeholder\", \"ngModel\", \"min\", \"max\", \"change\", \"ngModelChange\"], [2, \"margin-bottom\", \"4px !important\"], [\"title\", \"Cut the image\", 1, \"icon-btn\", 3, \"click\"], [3, \"filterState\", \"labels\", \"color\", \"changeFilter\"], [1, \"caption\", \"image-caption\", 3, \"ngStyle\"]],\n    template: function EditImageComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function EditImageComponent_Template_button_click_2_listener() {\n          return ctx.onCloseEditPanel(false);\n        });\n        i0.ɵɵelementStart(3, \"span\", 3);\n        i0.ɵɵtext(4, \"clear\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(5, \"div\", 4)(6, \"div\", 5);\n        i0.ɵɵelement(7, \"img\", 6);\n        i0.ɵɵtemplate(8, EditImageComponent_lib_cropper_wrapper_8_Template, 1, 2, \"lib-cropper-wrapper\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 8)(10, \"lib-tabs\", 9);\n        i0.ɵɵlistener(\"indexActivatedChange\", function EditImageComponent_Template_lib_tabs_indexActivatedChange_10_listener($event) {\n          return ctx.onControlPanelIndexChange($event);\n        });\n        i0.ɵɵtemplate(11, EditImageComponent_ng_container_11_Template, 8, 6, \"ng-container\", 10);\n        i0.ɵɵtemplate(12, EditImageComponent_ng_container_12_Template, 2, 3, \"ng-container\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"button\", 11);\n        i0.ɵɵlistener(\"click\", function EditImageComponent_Template_button_click_13_listener() {\n          return ctx.onRestore();\n        });\n        i0.ɵɵelementStart(14, \"span\", 3);\n        i0.ɵɵtext(15, \" refresh \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(16, \"div\", 12)(17, \"button\", 13);\n        i0.ɵɵlistener(\"click\", function EditImageComponent_Template_button_click_17_listener() {\n          return ctx.onCloseEditPanel(true);\n        });\n        i0.ɵɵtext(18);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(19, EditImageComponent_p_19_Template, 2, 6, \"p\", 14);\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(7);\n        i0.ɵɵstyleProp(\"display\", ctx.showCrop ? \"none\" : \"\");\n        i0.ɵɵproperty(\"src\", ctx.imageSrc, i0.ɵɵsanitizeUrl);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showCrop);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"color\", ctx.color)(\"_labels\", i0.ɵɵpureFunction0(12, _c4));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.controlPanelIndex == 0);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.controlPanelIndex == 1);\n        i0.ɵɵadvance(1);\n        i0.ɵɵpropertyInterpolate(\"title\", ctx.labels[\"Undo\"]);\n        i0.ɵɵproperty(\"disabled\", ctx.state.arrayCopiedImages.length <= 1);\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(ctx.labels[\"Save\"]);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.calculateSize());\n      }\n    },\n    dependencies: [i1.NgForOf, i1.NgIf, i1.NgStyle, i2.NgSelectOption, i2.ɵNgSelectMultipleOption, i2.DefaultValueAccessor, i2.NumberValueAccessor, i2.RangeValueAccessor, i2.CheckboxControlValueAccessor, i2.SelectControlValueAccessor, i2.NgControlStatus, i2.MinValidator, i2.MaxValidator, i2.NgModel, TabsComponent, BasicFiltersComponent, CropperWrapperComponent],\n    styles: [\".popup[_ngcontent-%COMP%]{width:100vw;max-height:100%;height:100%;overflow:auto;position:fixed;top:0;left:0;background-color:#000c;z-index:1000;padding:24px 16px;color:#fff;box-sizing:border-box;animation-name:show;animation-duration:.4s}.popup[_ngcontent-%COMP%]   .image-container[_ngcontent-%COMP%]{margin-top:50px;margin-bottom:50px;width:100%;flex-flow:row wrap;box-sizing:border-box;display:flex;place-content:flex-start center;align-items:flex-start}.popup[_ngcontent-%COMP%]   .image-container[_ngcontent-%COMP%]   .image-holder-full[_ngcontent-%COMP%]{height:auto;width:auto;position:relative;display:contents}.popup[_ngcontent-%COMP%]   .material-icons[_ngcontent-%COMP%]{color:#fff}.popup[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{vertical-align:middle;max-height:650px;max-width:100%;object-fit:cover;object-position:center}@media (max-width: 1024px){.popup[_ngcontent-%COMP%]{background-color:#000000d9;padding:8px}.popup[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{max-height:100%;max-width:100%}}@media (max-width: 599px){.popup[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{margin:0}}.popup[_ngcontent-%COMP%]   .control-panel[_ngcontent-%COMP%]{color:#fff;background-color:#000000eb;margin:0 16px;padding:16px;width:18rem;border-radius:8px;flex-direction:column;box-sizing:border-box;display:flex;place-content:stretch flex-start;align-items:stretch;max-width:100%;position:relative}@media (max-width: 599px){.popup[_ngcontent-%COMP%]   .control-panel[_ngcontent-%COMP%]{margin:8px 0;width:100%}}.popup[_ngcontent-%COMP%]   .control-panel[_ngcontent-%COMP%]   .title-panel[_ngcontent-%COMP%]{padding:0 4px;font-size:17px;font-weight:500;margin-bottom:16px!important}.popup[_ngcontent-%COMP%]   .control-panel[_ngcontent-%COMP%]   .item-panel[_ngcontent-%COMP%]{padding:0;font-size:14px;font-weight:500}.image-croper[_ngcontent-%COMP%]{position:absolute;width:180px;height:180px;min-height:64px;min-width:64px;border:2.5px solid #fafafa;box-sizing:border-box;resize:both;overflow:auto;opacity:0;border-radius:4px;overflow:hidden;z-index:10}.image-croper[_ngcontent-%COMP%]   #image-croper-header[_ngcontent-%COMP%]{padding:0;cursor:move;z-index:9;background-color:transparent;color:#fff;height:100%;display:grid;gap:0px;grid-template-columns:repeat(3,1fr);width:100%;box-sizing:border-box;position:absolute;top:50%;transform:translateY(-50%);opacity:.8}.image-croper[_ngcontent-%COMP%]   #image-croper-header[_ngcontent-%COMP%]   .material-icons[_ngcontent-%COMP%]{color:#fff}.input-range[_ngcontent-%COMP%]{margin-bottom:16px;margin-top:4px}input[type=checkbox][_ngcontent-%COMP%]{cursor:pointer}.form-field[_ngcontent-%COMP%]{margin-bottom:16px}.form-field[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{font-size:12px;opacity:.92;margin-bottom:4px;display:block}.form-field[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{height:34px;width:100%;box-sizing:border-box;border-radius:4px;border:none;padding:2px 8px;outline:none}.form-field[_ngcontent-%COMP%]   select[_ngcontent-%COMP%]{height:34px;width:100%;box-sizing:border-box;border-radius:4px;border:none;padding:2px 8px;outline:none;background-color:#fff}.save-btn[_ngcontent-%COMP%]{padding:0 8px;height:34px;box-sizing:border-box;background-color:#fff;color:#000;border:none;border-radius:4px;cursor:pointer}.save-btn[_ngcontent-%COMP%]:active{transform:scale(.95)}\"]\n  });\n  return EditImageComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet NgpImagePickerComponent = /*#__PURE__*/(() => {\n  class NgpImagePickerComponent {\n    constructor(chRef) {\n      this.chRef = chRef;\n      this.config = {\n        language: 'en',\n        objectFit: 'cover',\n        hideDeleteBtn: false,\n        hideDownloadBtn: false,\n        hideEditBtn: false,\n        hideAddBtn: false\n      };\n      this.state = {\n        quality: 92,\n        maxHeight: 1000,\n        maxWidth: 1000,\n        cropHeight: 150,\n        cropWidth: 150,\n        maintainAspectRatio: true,\n        format: 'jpeg',\n        arrayCopiedImages: [],\n        originImageSrc: ''\n      };\n      this.loadImage = false;\n      this.fileType = '';\n      this.urlImage = '';\n      this.uuidFilePicker = Date.now().toString(20);\n      this.showEditPanel = false;\n      this.imageName = 'download';\n      this.labels = labelEn;\n      this.arrayCopiedImages = [];\n      this.color = '#1e88e5';\n      this.imagePicker = null;\n      this.$imageChanged = new EventEmitter();\n      this.$imageOriginal = new EventEmitter();\n    }\n    set _imageSrc(value) {\n      if (value) {\n        this.parseToBase64(value).then(dataUri => {\n          this.imageSrc = dataUri;\n          this.state.originImageSrc = value;\n          this.state.arrayCopiedImages.push({\n            lastImage: dataUri,\n            width: this.state.maxWidth,\n            height: this.state.maxHeight,\n            quality: this.state.quality,\n            format: this.state.format,\n            originImageSrc: value\n          });\n          this.$imageOriginal.next(this.state.originImageSrc);\n          this.loadImage = true;\n          this.chRef.markForCheck();\n        }).catch(e => {\n          console.error('!!!!ERROR: ', e);\n        });\n      } else {\n        this.imageSrc = null;\n        this.state.originImageSrc = null;\n        this.loadImage = false;\n        this.state.arrayCopiedImages = [];\n        this.$imageOriginal.next(null);\n        this.state = {\n          ...this.state,\n          format: 'jpeg',\n          maxHeight: 1000,\n          maxWidth: 1000,\n          cropHeight: 150,\n          cropWidth: 150,\n          maintainAspectRatio: true\n        };\n        this.showEditPanel = false;\n        this.chRef.markForCheck();\n      }\n    }\n    set _config(value) {\n      this.processConfig(value);\n    }\n    ngOnInit() {\n      this.appendLinkIconsToHead();\n    }\n    appendLinkIconsToHead() {\n      let head = document.head;\n      let linkIcons = head.querySelector('#ngp-image-picker-icons-id');\n      if (linkIcons) return;\n      let link = document.createElement('link');\n      link.href = 'https://fonts.googleapis.com/icon?family=Material+Icons';\n      link.rel = 'stylesheet';\n      link.id = 'ngp-image-picker-icons-id';\n      head.appendChild(link);\n    }\n    onUpload(event) {\n      event.preventDefault();\n      this.imagePicker?.nativeElement.click();\n    }\n    handleFileSelect(evt) {\n      const files = evt.target?.files;\n      if (files) {\n        const file = files[0];\n        this.imageName = file.name.split('.')[0];\n        this.fileType = file.type;\n        if (!this.fileType.includes('image')) return;\n        this.urlImage = `data:${file.type};base64,`;\n        if (file) {\n          this.state.format = this.fileType.split('image/')[1];\n          const reader = new FileReader();\n          reader.onload = this.handleReaderLoaded.bind(this);\n          reader.readAsBinaryString(file);\n        }\n      }\n    }\n    handleReaderLoaded(readerEvt) {\n      var _this6 = this;\n      return _asyncToGenerator(function* () {\n        const binaryString = readerEvt.target.result;\n        const base64textString = btoa(binaryString);\n        _this6.state.originImageSrc = _this6.urlImage + base64textString;\n        if (_this6.config.compressInitial) {\n          _this6.state = {\n            ..._this6.state,\n            quality: Math.min(_this6.config.compressInitial || 92, 100),\n            maintainAspectRatio: true,\n            format: 'jpeg'\n          };\n          _this6.imageSrc = yield convertImageUsingCanvas(_this6.urlImage + base64textString, false, _this6.state, {\n            getDimFromImage: true\n          });\n        } else {\n          _this6.imageSrc = _this6.urlImage + base64textString;\n          let img = document.createElement('img');\n          img.src = _this6.imageSrc;\n          img.onload = () => {\n            _this6.state.arrayCopiedImages = [];\n            _this6.state.maxHeight = img.height;\n            _this6.state.maxWidth = img.width;\n            _this6.state.arrayCopiedImages.push({\n              lastImage: _this6.imageSrc,\n              width: img.width,\n              height: img.height,\n              quality: _this6.state.quality,\n              format: _this6.state.format,\n              originImageSrc: _this6.state.originImageSrc\n            });\n          };\n        }\n        _this6.$imageChanged.next(_this6.imageSrc);\n        _this6.loadImage = true;\n        _this6.chRef.markForCheck();\n      })();\n    }\n    onOpenEditPanel() {\n      this.showEditPanel = true;\n    }\n    onCloseEditPanel(data) {\n      if (data) {\n        this.state = data.state;\n        this.imageSrc = data.imageSrc;\n        this.$imageChanged.next(this.imageSrc);\n      }\n      this.showEditPanel = false;\n    }\n    parseToBase64(imageUrl) {\n      let types = imageUrl.split('.');\n      let type = types[types.length - 1];\n      if (type && (type == 'png' || type == 'jpeg' || type == 'webp')) {\n        type = type;\n      } else {\n        type = 'jpeg';\n      }\n      this.state = {\n        ...this.state,\n        format: type\n      };\n      return new Promise((resolve, reject) => {\n        let img = new window.Image();\n        img.crossOrigin = \"Anonymous\";\n        this.state = {\n          ...this.state,\n          maxHeight: img.height,\n          maxWidth: img.width\n        };\n        img.onload = e => {\n          let canvas = document.createElement('canvas');\n          let ctx = canvas.getContext('2d');\n          if (!ctx) return;\n          let ratio = 1.0;\n          canvas.width = img.width * ratio;\n          canvas.height = img.height * ratio;\n          ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n          let dataURI = canvas.toDataURL(`image/${type}`, this.state.quality);\n          return resolve({\n            dataUri: dataURI,\n            width: canvas.width,\n            height: canvas.height\n          });\n        };\n        img.onerror = e => {\n          return reject(e.message || `Error loading the src = ${imageUrl}`);\n        };\n        img.src = imageUrl;\n      }).then(data => {\n        this.state = {\n          ...this.state,\n          maxHeight: data.height,\n          maxWidth: data.width\n        };\n        return data.dataUri;\n      });\n    }\n    processConfig(value) {\n      if (value && value.constructor == Object) {\n        this.config = {\n          ...this.config,\n          ...value\n        };\n        if (value.language != undefined) {\n          if (value.language == 'en') {\n            this.labels = {\n              ...labelEn\n            };\n          }\n          if (value.language == 'es') {\n            this.labels = {\n              ...labelEs\n            };\n          }\n          if (value.language == 'fr') {\n            this.labels = {\n              ...labelFr\n            };\n          }\n          if (value.language == 'de') {\n            this.labels = {\n              ...labelDe\n            };\n          }\n        }\n      }\n    }\n    calculateSize() {\n      if (this.imageSrc && this.imageSrc.length) {\n        return Math.ceil(3 / 4 * this.imageSrc.length / 1024);\n      } else {\n        return 0;\n      }\n    }\n    ////////////////////////////////////////////////\n    onRemove() {\n      this.imageSrc = null;\n      this.loadImage = false;\n      this.$imageOriginal.next(null);\n      this.$imageChanged.next(null);\n      this.state = {\n        ...this.state,\n        originImageSrc: '',\n        format: 'jpeg',\n        maxHeight: 1000,\n        maxWidth: 1000,\n        cropHeight: 150,\n        cropWidth: 150,\n        maintainAspectRatio: true,\n        arrayCopiedImages: [],\n        basicFilters: undefined,\n        quality: 92\n      };\n      this.showEditPanel = false;\n    }\n  }\n  NgpImagePickerComponent.ɵfac = function NgpImagePickerComponent_Factory(t) {\n    return new (t || NgpImagePickerComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  NgpImagePickerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NgpImagePickerComponent,\n    selectors: [[\"ngp-image-picker\"]],\n    viewQuery: function NgpImagePickerComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c5, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.imagePicker = _t.first);\n      }\n    },\n    inputs: {\n      color: \"color\",\n      _imageSrc: \"_imageSrc\",\n      _config: \"_config\"\n    },\n    outputs: {\n      $imageChanged: \"$imageChanged\",\n      $imageOriginal: \"$imageOriginal\"\n    },\n    decls: 3,\n    vars: 3,\n    consts: [[\"class\", \"place-image\", 4, \"ngIf\"], [3, \"imageSrc\", \"initialState\", \"labels\", \"color\", \"closeModal\", 4, \"ngIf\"], [1, \"place-image\"], [1, \"image-holder\", 3, \"ngStyle\"], [1, \"icon-btn\", \"image-upload-btn\", 3, \"title\", \"click\"], [1, \"material-icons\"], [\"type\", \"file\", 2, \"display\", \"none\", 3, \"id\", \"change\"], [\"imagePicker\", \"\"], [1, \"image-holder-loaded\", 3, \"ngStyle\"], [\"alt\", \"image-loaded\", 3, \"src\", \"ngStyle\"], [\"class\", \"caption image-caption\", 3, \"ngStyle\", 4, \"ngIf\"], [1, \"editing-bar-btn\", 2, \"flex-direction\", \"row\", \"box-sizing\", \"border-box\", \"display\", \"flex\", \"place-content\", \"flex-start\", \"align-items\", \"flex-start\"], [\"class\", \"icon-btn\", \"id\", \"upload-img\", 3, \"title\", \"click\", 4, \"ngIf\"], [\"class\", \"icon-btn\", \"id\", \"edit-img\", 3, \"title\", \"click\", 4, \"ngIf\"], [\"id\", \"download-img\", 3, \"title\", \"href\", \"download\", 4, \"ngIf\"], [\"class\", \"icon-btn\", \"id\", \"delete-img\", 3, \"title\", \"click\", 4, \"ngIf\"], [1, \"caption\", \"image-caption\", 3, \"ngStyle\"], [\"id\", \"upload-img\", 1, \"icon-btn\", 3, \"title\", \"click\"], [\"id\", \"edit-img\", 1, \"icon-btn\", 3, \"title\", \"click\"], [\"id\", \"download-img\", 3, \"title\", \"href\", \"download\"], [\"id\", \"delete-img\", 1, \"icon-btn\", 3, \"title\", \"click\"], [3, \"imageSrc\", \"initialState\", \"labels\", \"color\", \"closeModal\"]],\n    template: function NgpImagePickerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, NgpImagePickerComponent_div_0_Template, 7, 8, \"div\", 0);\n        i0.ɵɵtemplate(1, NgpImagePickerComponent_div_1_Template, 11, 17, \"div\", 0);\n        i0.ɵɵtemplate(2, NgpImagePickerComponent_lib_edit_image_2_Template, 1, 4, \"lib-edit-image\", 1);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", !ctx.loadImage);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.loadImage);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showEditPanel);\n      }\n    },\n    dependencies: [i1.NgIf, i1.NgStyle, EditImageComponent],\n    styles: [\"ngp-image-picker p{margin:0!important;padding:0!important}ngp-image-picker .place-image{flex-direction:column;box-sizing:border-box;display:flex;place-content:flex-start;align-items:flex-start}ngp-image-picker .place-image .image-holder{flex-direction:column;display:flex;place-content:center;align-items:center;position:relative;border-radius:16px;max-width:100%!important;box-sizing:border-box;border:2px rgba(0,0,0,.3) solid;background-color:#fcfcfc}@media (max-width: 599px){ngp-image-picker .place-image .image-holder{max-width:100%!important;max-height:250px!important}}ngp-image-picker .place-image .image-holder .image-upload-btn{transition:all .5s ease;position:relative;opacity:.85;width:50px;height:50px;color:#424242}ngp-image-picker .place-image .image-holder .image-upload-btn .material-icons{font-size:50px;width:50px;height:50px;line-height:50px;color:#424242}@media (max-width: 599px){ngp-image-picker .place-image .image-holder .image-upload-btn{opacity:1;width:30px;height:30px}ngp-image-picker .place-image .image-holder .image-upload-btn .material-icons{font-size:30px;width:30px;height:30px;line-height:30px}}ngp-image-picker .place-image .image-holder:hover .image-upload-btn{opacity:1;transition:all .5s ease}ngp-image-picker .place-image .image-holder-loaded{flex-direction:column;display:flex;place-content:center;align-items:center;position:relative;max-width:100%!important;border-radius:4px;box-sizing:border-box;padding:2px}ngp-image-picker .place-image .image-holder-loaded .image-caption{position:absolute;right:0;bottom:-22px}ngp-image-picker .place-image .image-holder-loaded img{height:100%;max-height:100%;width:100%;max-width:100%;object-position:center;background:black}@media (max-width: 599px){ngp-image-picker .place-image .image-holder-loaded{max-height:195px!important}}ngp-image-picker .place-image .image-holder-loaded .image-upload-btn{transition:all .5s ease;position:relative;opacity:.85;width:50px;height:50px;color:#424242}ngp-image-picker .place-image .image-holder-loaded .image-upload-btn .material-icons{font-size:50px;width:50px;height:50px;line-height:50px;color:#424242}@media (max-width: 599px){ngp-image-picker .place-image .image-holder-loaded .image-upload-btn{opacity:1;width:30px;height:30px}ngp-image-picker .place-image .image-holder-loaded .image-upload-btn .material-icons{font-size:30px;width:30px;height:30px;line-height:30px}}ngp-image-picker .place-image .image-holder-loaded:hover .image-upload-btn{opacity:1;transition:all .5s ease}ngp-image-picker .place-image .editing-bar-btn{margin-top:2px}ngp-image-picker .place-image .editing-bar-btn .material-icons-button{height:20px;line-height:20px;width:24px}ngp-image-picker .place-image .editing-bar-btn .material-icons{line-height:20px!important;font-size:20px!important;width:20px!important;height:20px!important}ngp-image-picker .place-image .editing-bar-btn button{margin:4px;color:#424242;transition:all .5s ease}ngp-image-picker .place-image .editing-bar-btn button:hover{transition:all .25s ease-in}ngp-image-picker .place-image .editing-bar-btn a{margin:4px;color:#424242;transition:all .5s ease}ngp-image-picker .place-image .editing-bar-btn a:hover{transition:all .25s ease-in}@keyframes show{0%{top:-100vh;opacity:0}to{top:0;opacity:1}}ngp-image-picker .btn{padding:4px 8px;border-radius:4px;cursor:pointer}ngp-image-picker .btn .material-icons{color:#000000d1}ngp-image-picker .icon-btn{display:flex;justify-content:center;align-items:center;border:none;background-color:inherit;border-radius:50%;cursor:pointer}ngp-image-picker .icon-btn :active{transform:scale(.95)}ngp-image-picker .caption{font-size:11px;margin-top:2px!important;margin-bottom:0!important}ngp-image-picker button[disabled]{filter:brightness(.5);cursor:not-allowed}ngp-image-picker .croppr-container *{user-select:none;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;box-sizing:border-box;-webkit-box-sizing:border-box;-moz-box-sizing:border-box}ngp-image-picker .croppr-container img{vertical-align:middle;max-width:100%;max-height:650px;object-fit:cover;object-position:center}ngp-image-picker .croppr{position:relative;display:inline-block}ngp-image-picker .croppr-overlay{background:rgba(0,0,0,.5);position:absolute;inset:0;z-index:1;cursor:crosshair}ngp-image-picker .croppr-region{border:1px dashed rgba(0,0,0,.5);position:absolute;z-index:3;cursor:move;top:0;display:grid;gap:0px;grid-template-columns:repeat(3,1fr)}ngp-image-picker .croppr-imageClipped{position:absolute;inset:0;z-index:2;pointer-events:none}ngp-image-picker .croppr-handle{border:1px solid #ccc;background-color:#fafafa;width:14px;height:14px;position:absolute;z-index:4;top:0;border-radius:50%}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return NgpImagePickerComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet NgpImagePickerModule = /*#__PURE__*/(() => {\n  class NgpImagePickerModule {}\n  NgpImagePickerModule.ɵfac = function NgpImagePickerModule_Factory(t) {\n    return new (t || NgpImagePickerModule)();\n  };\n  NgpImagePickerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgpImagePickerModule\n  });\n  NgpImagePickerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule, FormsModule, ReactiveFormsModule]\n  });\n  return NgpImagePickerModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\n * Public API Surface of ngp-image-picker\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgpImagePickerComponent, NgpImagePickerModule };\n//# sourceMappingURL=ngp-image-picker.mjs.map\n//# sourceMappingURL=ngp-image-picker.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}