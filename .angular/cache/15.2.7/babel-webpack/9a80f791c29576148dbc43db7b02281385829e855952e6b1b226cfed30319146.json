{"ast":null,"code":"import { ref, uploadBytes } from '@angular/fire/storage';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/storage\";\nexport class ImageServiceService {\n  constructor(storage) {\n    this.storage = storage;\n  }\n  onAction($event, name) {\n    const image = $event.target.files[0];\n    const imgRef = ref(this.storage, `images/` + name);\n    uploadBytes(imgRef, image).then(response => {\n      this.getImages();\n    }).catch(error => console.log(error));\n  }\n}\nImageServiceService.ɵfac = function ImageServiceService_Factory(t) {\n  return new (t || ImageServiceService)(i0.ɵɵinject(i1.Storage));\n};\nImageServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ImageServiceService,\n  factory: ImageServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAkBA,GAAG,EAAEC,WAAW,QAAO,uBAAuB;;;AAKhE,OAAM,MAAOC,mBAAmB;EAE9BC,YAAoBC,OAAiB;IAAjB,YAAO,GAAPA,OAAO;EAAc;EAGlCC,QAAQ,CAACC,MAAY,EAAEC,IAAY;IACxC,MAAMC,KAAK,GAAGF,MAAM,CAACG,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IACpC,MAAMC,MAAM,GAAGX,GAAG,CAAC,IAAI,CAACI,OAAO,EAAC,SAAS,GAACG,IAAI,CAAC;IAC/CN,WAAW,CAACU,MAAM,EAACH,KAAK,CAAC,CACxBI,IAAI,CAACC,QAAQ,IAAG;MAAE,IAAI,CAACC,SAAS,EAAE;IAAC,CAAC,CAAC,CACrCC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;EAErC;;AAZWd,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;SAAnBA,mBAAmB;EAAAiB,SAAnBjB,mBAAmB;EAAAkB,YAFlB;AAAM","names":["ref","uploadBytes","ImageServiceService","constructor","storage","onAction","$event","name","image","target","files","imgRef","then","response","getImages","catch","error","console","log","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\migue\\Desktop\\Argentina Programa\\PortfolioFrontEnd\\PortfolioFrontEnd\\src\\app\\services\\image-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Storage, ref, uploadBytes} from '@angular/fire/storage';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ImageServiceService {\n\n  constructor(private storage : Storage) { }\n\n\n  public onAction($event : any, name :string ) : void{\n    const image = $event.target.files[0];\n    const imgRef = ref(this.storage,`images/`+name);\n    uploadBytes(imgRef,image)\n    .then(response => {this.getImages() })\n    .catch(error => console.log(error))\n    \n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}