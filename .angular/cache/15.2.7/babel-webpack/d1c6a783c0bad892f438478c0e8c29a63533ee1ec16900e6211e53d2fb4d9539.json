{"ast":null,"code":"import * as i0 from \"@angular/core\";\nconst TOKEN_KEY = 'AuthToken';\nconst USERNAME_KEY = 'AuthUsername';\nconst AUTHORITIES_KEY = 'AuthAuthorities';\nexport class TokenService {\n  constructor() {\n    this.roles = [];\n  }\n  setToken(token) {\n    window.sessionStorage.removeItem(TOKEN_KEY);\n    window.sessionStorage.setItem(TOKEN_KEY, token);\n  }\n  getToken() {\n    return window.sessionStorage.getItem(TOKEN_KEY);\n  }\n  setUserName(userName) {\n    window.sessionStorage.removeItem(USERNAME_KEY);\n    window.sessionStorage.setItem(USERNAME_KEY, userName);\n  }\n  getUserName() {\n    return window.sessionStorage.getItem(USERNAME_KEY);\n  }\n  setAthorities(authorities) {\n    window.sessionStorage.removeItem(AUTHORITIES_KEY);\n    window.sessionStorage.setItem(AUTHORITIES_KEY, JSON.stringify(authorities));\n  }\n  getAthorities() {\n    this.roles = [];\n    if (sessionStorage.getItem(AUTHORITIES_KEY)) {\n      JSON.parse(sessionStorage.getItem(AUTHORITIES_KEY)).forEach(authority => {\n        this.roles.push(authority.authority);\n      });\n    }\n    return this.roles;\n  }\n  logOut() {\n    window.sessionStorage.clear();\n  }\n}\nTokenService.ɵfac = function TokenService_Factory(t) {\n  return new (t || TokenService)();\n};\nTokenService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TokenService,\n  factory: TokenService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAEA,MAAMA,SAAS,GAAG,WAAW;AAC7B,MAAMC,YAAY,GAAG,cAAc;AACnC,MAAMC,eAAe,GAAG,iBAAiB;AAKzC,OAAM,MAAOC,YAAY;EAIvBC;IAFA,UAAK,GAAmB,EAAE;EAEV;EAETC,QAAQ,CAACC,KAAY;IAC1BC,MAAM,CAACC,cAAc,CAACC,UAAU,CAACT,SAAS,CAAC;IAC3CO,MAAM,CAACC,cAAc,CAACE,OAAO,CAACV,SAAS,EAACM,KAAK,CAAC;EAChD;EAEOK,QAAQ;IACb,OAAOJ,MAAM,CAACC,cAAc,CAACI,OAAO,CAACZ,SAAS,CAAE;EAClD;EAEOa,WAAW,CAACC,QAAiB;IAClCP,MAAM,CAACC,cAAc,CAACC,UAAU,CAACR,YAAY,CAAC;IAC9CM,MAAM,CAACC,cAAc,CAACE,OAAO,CAACT,YAAY,EAACa,QAAQ,CAAC;EACtD;EAEOC,WAAW;IAChB,OAAOR,MAAM,CAACC,cAAc,CAACI,OAAO,CAACX,YAAa,CAAE;EACtD;EAEOe,aAAa,CAACC,WAAsB;IACzCV,MAAM,CAACC,cAAc,CAACC,UAAU,CAACP,eAAe,CAAC;IACjDK,MAAM,CAACC,cAAc,CAACE,OAAO,CAACR,eAAe,EAACgB,IAAI,CAACC,SAAS,CAACF,WAAW,CAAC,CAAC;EAC5E;EAEOG,aAAa;IAClB,IAAI,CAACC,KAAK,GAAG,EAAE;IACf,IAAGb,cAAc,CAACI,OAAO,CAACV,eAAe,CAAC,EAAC;MACzCgB,IAAI,CAACI,KAAK,CAACd,cAAc,CAACI,OAAO,CAACV,eAAe,CAAE,CAAC,CAACqB,OAAO,CAAEC,SAAa,IAAI;QAC7E,IAAI,CAACH,KAAK,CAACI,IAAI,CAACD,SAAS,CAACA,SAAS,CAAC;MACtC,CAAC,CAAC;;IAEJ,OAAO,IAAI,CAACH,KAAK;EACnB;EAEOK,MAAM;IACXnB,MAAM,CAACC,cAAc,CAACmB,KAAK,EAAE;EAC/B;;AAzCWxB,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAyB,SAAZzB,YAAY;EAAA0B,YAFX;AAAM","names":["TOKEN_KEY","USERNAME_KEY","AUTHORITIES_KEY","TokenService","constructor","setToken","token","window","sessionStorage","removeItem","setItem","getToken","getItem","setUserName","userName","getUserName","setAthorities","authorities","JSON","stringify","getAthorities","roles","parse","forEach","authority","push","logOut","clear","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\migue\\Desktop\\Argentina Programa\\PortfolioFrontEnd\\PortfolioFrontEnd\\src\\app\\services\\token.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nconst TOKEN_KEY = 'AuthToken';\r\nconst USERNAME_KEY = 'AuthUsername';\r\nconst AUTHORITIES_KEY = 'AuthAuthorities';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TokenService {\r\n\r\n  roles : Array<string> = [];\r\n\r\n  constructor() { }\r\n\r\n  public setToken(token:string):void{\r\n    window.sessionStorage.removeItem(TOKEN_KEY);\r\n    window.sessionStorage.setItem(TOKEN_KEY,token);\r\n  }\r\n\r\n  public getToken():string{\r\n    return window.sessionStorage.getItem(TOKEN_KEY)!;\r\n  }\r\n\r\n  public setUserName(userName : string):void {\r\n    window.sessionStorage.removeItem(USERNAME_KEY);\r\n    window.sessionStorage.setItem(USERNAME_KEY,userName);\r\n  }\r\n\r\n  public getUserName():string{\r\n    return window.sessionStorage.getItem(USERNAME_KEY!)!;\r\n  }\r\n\r\n  public setAthorities(authorities : string[]):void {\r\n    window.sessionStorage.removeItem(AUTHORITIES_KEY);\r\n    window.sessionStorage.setItem(AUTHORITIES_KEY,JSON.stringify(authorities));\r\n  }\r\n\r\n  public getAthorities():string[]{\r\n    this.roles = [];\r\n    if(sessionStorage.getItem(AUTHORITIES_KEY)){\r\n      JSON.parse(sessionStorage.getItem(AUTHORITIES_KEY)!).forEach((authority:any) => {\r\n        this.roles.push(authority.authority);\r\n      });\r\n    }\r\n    return this.roles;\r\n  }\r\n\r\n  public logOut(): void {\r\n    window.sessionStorage.clear();\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}